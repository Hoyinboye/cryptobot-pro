{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CryptoBot Pro\n\n## Overview\n\nCryptoBot Pro is a full-stack AI-powered cryptocurrency trading platform that combines real-time market analysis with automated trading capabilities. The application features a React frontend with TypeScript, an Express.js backend, and PostgreSQL database integration through Drizzle ORM. Users can analyze market trends, receive AI-generated trading signals, execute trades through Kraken API integration, and manage their portfolios with comprehensive risk management tools.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/build tooling\n- **UI Framework**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: Firebase Authentication for user management\n- **Real-time Communication**: WebSocket integration for live market data updates\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for API server\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Firebase Admin SDK for token verification and user management\n- **API Integration**: Kraken API for cryptocurrency trading and market data\n- **Real-time Features**: WebSocket server for live price updates and notifications\n- **Session Management**: PostgreSQL-based session storage with connect-pg-simple\n\n### Database Design\n- **Users Table**: Firebase UID mapping, API credentials, risk settings, demo/live mode flags\n- **Portfolios Table**: User balance tracking, P&L calculations, trading statistics\n- **Holdings Table**: Current positions with real-time value calculations\n- **Trades Table**: Complete trading history with execution details and status tracking\n- **AI Signals Table**: Machine learning predictions with confidence scores and recommendations\n- **Trading Strategies Table**: User-defined automated trading rules and configurations\n\n### External Dependencies\n\n#### Third-party Services\n- **Firebase**: User authentication and authorization management\n- **Kraken API**: Cryptocurrency exchange integration for trading and market data\n- **OpenAI API**: AI-powered market analysis and trading signal generation\n- **Neon Database**: PostgreSQL hosting with serverless scaling\n\n#### Key Libraries\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **shadcn/ui**: Pre-built accessible UI components\n- **TanStack Query**: Server state management and data synchronization\n- **React Hook Form**: Form handling with Zod validation\n- **WebSocket (ws)**: Real-time bidirectional communication\n- **Radix UI**: Headless accessible component primitives\n\n#### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Static type checking across the entire stack\n- **Tailwind CSS**: Utility-first CSS framework\n- **ESBuild**: Fast JavaScript bundling for production","size_bytes":3113},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-slow\": \"pulse-slow 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2985},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertTradeSchema, insertAiSignalSchema, sanitizeUser } from \"@shared/schema\";\nimport OpenAI from \"openai\";\nimport crypto from \"crypto\";\nimport { z } from \"zod\";\nimport { initializeApp, getApps, cert, ServiceAccount } from \"firebase-admin/app\";\nimport { getAuth } from \"firebase-admin/auth\";\n\n// Initialize Firebase Admin SDK\nif (getApps().length === 0) {\n  // For demo/development - initialize with project ID from environment\n  initializeApp({\n    projectId: process.env.VITE_FIREBASE_PROJECT_ID\n  });\n}\n\nconst adminAuth = getAuth();\n\n// Extend Express Request type to include firebaseUid\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    firebaseUid?: string;\n  }\n}\n\n// Kraken API helper functions\nfunction getKrakenSignature(path: string, request: string, secret: string, nonce: string): string {\n  const message = nonce + request;\n  const hash = crypto.createHash('sha256').update(message).digest();\n  const hmac = crypto.createHmac('sha512', Buffer.from(secret, 'base64'));\n  hmac.update(path + hash);\n  return hmac.digest('base64');\n}\n\nasync function krakenRequest(endpoint: string, data: any = {}, apiKey?: string, apiSecret?: string) {\n  const baseUrl = 'https://api.kraken.com';\n  \n  if (apiKey && apiSecret) {\n    // Private API call\n    const nonce = Date.now() * 1000;\n    const postData = new URLSearchParams({ nonce: nonce.toString(), ...data }).toString();\n    const signature = getKrakenSignature(endpoint, postData, apiSecret, nonce.toString());\n    \n    const response = await fetch(`${baseUrl}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'API-Key': apiKey,\n        'API-Sign': signature,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: postData\n    });\n    \n    return response.json();\n  } else {\n    // Public API call\n    const response = await fetch(`${baseUrl}${endpoint}`);\n    return response.json();\n  }\n}\n\n// Lazy OpenAI initialization to prevent startup crashes\nlet openaiClient: OpenAI | null = null;\nfunction getOpenAI(): OpenAI {\n  if (!openaiClient) {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error('OPENAI_API_KEY environment variable is required for AI features');\n    }\n    openaiClient = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY\n    });\n  }\n  return openaiClient;\n}\n\n// Symbol mapping for Kraken API compatibility\nconst SYMBOL_MAP: { [key: string]: string } = {\n  'BTCUSD': 'XXBTZUSD',\n  'ETHUSD': 'XETHZUSD', \n  'ADAUSD': 'ADAUSD',\n  'SOLUSD': 'SOLUSD',\n  'DOTUSD': 'DOTUSD',\n  'LINKUSD': 'LINKUSD'\n};\n\n// Reverse mapping for display\nconst DISPLAY_MAP: { [key: string]: string } = {\n  'XXBTZUSD': 'BTCUSD',\n  'XETHZUSD': 'ETHUSD',\n  'ADAUSD': 'ADAUSD',\n  'SOLUSD': 'SOLUSD',\n  'DOTUSD': 'DOTUSD',\n  'LINKUSD': 'LINKUSD'\n};\n\n// Risk management helper functions\ninterface RiskSettings {\n  maxPositionSize?: string; // Maximum value of a single trade in USD\n  maxDailyLoss?: string; // Maximum daily loss in USD\n  maxOpenPositions?: number; // Maximum number of open positions\n  enabled?: boolean; // Whether risk management is enabled\n}\n\nasync function validateRiskLimits(\n  userId: string,\n  portfolioId: string,\n  tradeValue: number,\n  tradeSide: string,\n  symbol: string,\n  riskSettings: RiskSettings\n): Promise<{ allowed: boolean; reason?: string }> {\n  // If risk management is disabled, allow all trades\n  if (!riskSettings.enabled) {\n    return { allowed: true };\n  }\n\n  // Check max position size (only for buys that increase exposure)\n  if (riskSettings.maxPositionSize && tradeSide === 'buy') {\n    const maxPositionSize = parseFloat(riskSettings.maxPositionSize);\n    if (tradeValue > maxPositionSize) {\n      return {\n        allowed: false,\n        reason: `Trade value $${tradeValue.toFixed(2)} exceeds maximum position size limit of $${maxPositionSize.toFixed(2)}`\n      };\n    }\n  }\n\n  // Check max open positions (only for buys into new positions)\n  if (riskSettings.maxOpenPositions && tradeSide === 'buy') {\n    const holdings = await storage.getHoldings(portfolioId);\n    const openPositions = holdings.length;\n    const existingHolding = holdings.find(h => h.symbol === symbol);\n    \n    // Only block if at limit AND this is a new position (not adding to existing)\n    if (openPositions >= riskSettings.maxOpenPositions && !existingHolding) {\n      return {\n        allowed: false,\n        reason: `Maximum open positions limit reached (${openPositions}/${riskSettings.maxOpenPositions}). Cannot open new position in ${symbol}.`\n      };\n    }\n  }\n\n  // Check daily loss limit (including the current trade)\n  if (riskSettings.maxDailyLoss) {\n    const maxDailyLoss = parseFloat(riskSettings.maxDailyLoss);\n    const todayStart = new Date();\n    todayStart.setHours(0, 0, 0, 0);\n    \n    // Get today's trades to calculate daily P&L\n    const allTrades = await storage.getTrades(userId, 1000);\n    const todayTrades = allTrades.filter(t => \n      t.createdAt && new Date(t.createdAt) >= todayStart\n    );\n    \n    // Calculate realized P&L from today's trades\n    let dailyPnL = 0;\n    for (const trade of todayTrades) {\n      const value = parseFloat(trade.amount) * parseFloat(trade.price);\n      if (trade.side === 'sell') {\n        // Selling adds to P&L (simplified - actual P&L would need entry price)\n        dailyPnL += value;\n      } else {\n        // Buying reduces P&L\n        dailyPnL -= value;\n      }\n    }\n    \n    // Include the prospective trade effect\n    if (tradeSide === 'buy') {\n      dailyPnL -= tradeValue;\n    } else {\n      dailyPnL += tradeValue;\n    }\n    \n    // Block if including this trade would exceed loss limit\n    if (dailyPnL < 0 && Math.abs(dailyPnL) >= maxDailyLoss) {\n      return {\n        allowed: false,\n        reason: `Daily loss limit would be exceeded ($${Math.abs(dailyPnL).toFixed(2)}/$${maxDailyLoss.toFixed(2)} including this trade)`\n      };\n    }\n  }\n\n  return { allowed: true };\n}\n\n// Helper function to fetch and transform Kraken trade history\nasync function getKrakenTradeHistory(apiKey: string, apiSecret: string, options: {\n  start?: number;\n  end?: number;\n  ofs?: number;\n} = {}) {\n  try {\n    const params: any = {\n      trades: true, // Include trade info\n      ...options\n    };\n\n    const response = await krakenRequest('/0/private/ClosedOrders', params, apiKey, apiSecret);\n    \n    if (response.error && response.error.length > 0) {\n      console.error('Kraken ClosedOrders error:', response.error);\n      return [];\n    }\n\n    const orders = response.result?.closed || {};\n    const transformedTrades = [];\n\n    for (const [orderId, order] of Object.entries(orders)) {\n      const orderData = order as any;\n      \n      // Transform Kraken order to our Trade format\n      const symbol = DISPLAY_MAP[orderData.descr.pair] || orderData.descr.pair;\n      const side = orderData.descr.type;\n      const type = orderData.descr.ordertype;\n      const amount = orderData.vol;\n      const price = orderData.descr.price || orderData.price || '0';\n      const status = orderData.status === 'closed' ? 'filled' : orderData.status;\n      \n      transformedTrades.push({\n        id: orderId,\n        krakenOrderId: orderId,\n        symbol,\n        side,\n        type,\n        amount,\n        price,\n        status,\n        createdAt: new Date(orderData.opentm * 1000),\n        filledAt: orderData.closetm ? new Date(orderData.closetm * 1000) : null,\n        metadata: {\n          kraken: true,\n          cost: orderData.cost,\n          fee: orderData.fee,\n          vol_exec: orderData.vol_exec\n        }\n      });\n    }\n\n    return transformedTrades;\n  } catch (error) {\n    console.error('Error fetching Kraken trade history:', error);\n    return [];\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time data\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  // Store active WebSocket connections\n  const wsConnections = new Set<WebSocket>();\n  \n  wss.on('connection', (ws) => {\n    wsConnections.add(ws);\n    console.log('WebSocket client connected');\n    \n    ws.on('close', () => {\n      wsConnections.delete(ws);\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  // Broadcast to all connected clients\n  function broadcast(data: any) {\n    wsConnections.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify(data));\n      }\n    });\n  }\n\n  // Auth middleware with proper Firebase token verification\n  const requireAuth = async (req: Request, res: any, next: any) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ error: 'No valid authorization token provided' });\n      }\n\n      const idToken = authHeader.split('Bearer ')[1];\n      \n      // Verify the Firebase ID token\n      const decodedToken = await adminAuth.verifyIdToken(idToken);\n      req.firebaseUid = decodedToken.uid;\n      next();\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      return res.status(401).json({ error: 'Invalid or expired token' });\n    }\n  };\n\n  // User routes - secure login with token verification\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ error: 'No valid authorization token provided' });\n      }\n\n      const idToken = authHeader.split('Bearer ')[1];\n      const decodedToken = await adminAuth.verifyIdToken(idToken);\n      \n      // Extract user info from verified token (not client-supplied data)\n      const firebaseUid = decodedToken.uid;\n      const email = decodedToken.email || '';\n      const displayName = decodedToken.name || null;\n      const photoURL = decodedToken.picture || null;\n      \n      let user = await storage.getUserByFirebaseUid(firebaseUid);\n      \n      if (!user) {\n        user = await storage.createUser({\n          firebaseUid,\n          email,\n          displayName,\n          photoURL,\n          isDemo: true,\n          krakenApiKey: null,\n          krakenApiSecret: null,\n          riskSettings: {}\n        });\n\n        // Create default portfolio\n        await storage.createPortfolio({\n          userId: user.id,\n          totalBalance: \"10000.00\", // Demo balance\n          availableBalance: \"10000.00\",\n          tradingBalance: \"0.00\",\n          pnl24h: \"0.00\",\n          pnlPercentage24h: \"0.00\",\n          isDemo: true\n        });\n      }\n\n      res.json({ user: sanitizeUser(user) });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Login failed' });\n    }\n  });\n\n  app.get('/api/user/profile', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      res.json({ user: sanitizeUser(user) });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get user profile' });\n    }\n  });\n\n  app.put('/api/user/risk-settings', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      \n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      const { enabled, maxPositionSize, maxDailyLoss, maxOpenPositions } = req.body;\n      \n      // Validate input\n      const riskSettings: RiskSettings = {};\n      \n      if (typeof enabled === 'boolean') {\n        riskSettings.enabled = enabled;\n      }\n      \n      if (maxPositionSize !== undefined && maxPositionSize !== null && maxPositionSize !== '') {\n        const value = parseFloat(maxPositionSize);\n        if (isNaN(value) || value <= 0) {\n          return res.status(400).json({ error: 'Max position size must be a positive number greater than zero' });\n        }\n        riskSettings.maxPositionSize = value.toString();\n      }\n      \n      if (maxDailyLoss !== undefined && maxDailyLoss !== null && maxDailyLoss !== '') {\n        const value = parseFloat(maxDailyLoss);\n        if (isNaN(value) || value <= 0) {\n          return res.status(400).json({ error: 'Max daily loss must be a positive number greater than zero' });\n        }\n        riskSettings.maxDailyLoss = value.toString();\n      }\n      \n      if (maxOpenPositions !== undefined && maxOpenPositions !== null && maxOpenPositions !== '') {\n        const value = parseInt(maxOpenPositions, 10);\n        if (isNaN(value) || !Number.isInteger(value) || value < 1) {\n          return res.status(400).json({ error: 'Max open positions must be an integer of at least 1' });\n        }\n        riskSettings.maxOpenPositions = value;\n      }\n\n      // Update user risk settings\n      await storage.updateUser(user.id, { riskSettings });\n      \n      const updatedUser = await storage.getUserByFirebaseUid(req.firebaseUid);\n      res.json({ user: sanitizeUser(updatedUser!) });\n    } catch (error) {\n      console.error('Update risk settings error:', error);\n      res.status(500).json({ error: 'Failed to update risk settings' });\n    }\n  });\n\n  // Portfolio routes\n  app.get('/api/portfolio', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      const portfolio = await storage.getPortfolio(user.id);\n      const holdings = portfolio ? await storage.getHoldings(portfolio.id) : [];\n\n      res.json({ portfolio, holdings });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get portfolio' });\n    }\n  });\n\n  // Market data routes\n  app.get('/api/market/ticker/:symbol', async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const krakenSymbol = SYMBOL_MAP[symbol] || symbol;\n      const data = await krakenRequest(`/0/public/Ticker?pair=${krakenSymbol}`);\n      \n      // Normalize Kraken response to expected format\n      if (data.error && data.error.length > 0) {\n        return res.status(400).json({ error: data.error[0] });\n      }\n      \n      const result = data.result;\n      const pairKey = Object.keys(result)[0]; // Get first (and usually only) pair\n      const tickerData = result[pairKey];\n      \n      if (!tickerData) {\n        return res.status(404).json({ error: 'Symbol not found' });\n      }\n      \n      // Extract relevant data from Kraken format\n      // c = last trade closed array [price, lot volume]\n      // v = volume array [today, 24h]\n      // p = volume weighted average price array [today, 24h]\n      // o = today's opening price\n      const currentPrice = parseFloat(tickerData.c[0]);\n      const openPrice = parseFloat(tickerData.o);\n      const volume24h = parseFloat(tickerData.v[1]);\n      const change24h = currentPrice - openPrice;\n      const changePercent = openPrice > 0 ? ((change24h / openPrice) * 100).toFixed(2) : '0.00';\n      \n      const normalizedResponse = {\n        symbol: symbol,\n        price: currentPrice.toFixed(2),\n        change24h: change24h.toFixed(2),\n        changePercent: changePercent,\n        volume: volume24h.toFixed(2),\n        timestamp: Date.now()\n      };\n      \n      res.json(normalizedResponse);\n    } catch (error) {\n      console.error('Market data error:', error);\n      res.status(500).json({ error: 'Failed to get market data' });\n    }\n  });\n\n  app.get('/api/market/tickers', async (req, res) => {\n    try {\n      // Curated list of popular trading pairs for reliable data\n      const pairs = 'XXBTZUSD,XETHZUSD,ADAUSD,SOLUSD,DOTUSD,LINKUSD';\n      const data = await krakenRequest(`/0/public/Ticker?pair=${pairs}`);\n      \n      // Normalize Kraken response to expected format\n      if (data.error && data.error.length > 0) {\n        return res.status(400).json({ error: data.error[0] });\n      }\n      \n      const result = data.result;\n      const normalizedTickers = [];\n      \n      // Symbol mapping for cleaner frontend display\n      const symbolMap: { [key: string]: string } = {\n        'XXBTZUSD': 'BTCUSD',\n        'XETHZUSD': 'ETHUSD', \n        'ADAUSD': 'ADAUSD',\n        'SOLUSD': 'SOLUSD',\n        'DOTUSD': 'DOTUSD',\n        'LINKUSD': 'LINKUSD'\n      };\n      \n      // Convert each ticker to normalized format\n      for (const [pairKey, tickerData] of Object.entries(result)) {\n        if (tickerData && typeof tickerData === 'object') {\n          const currentPrice = parseFloat((tickerData as any).c[0]);\n          const openPrice = parseFloat((tickerData as any).o);\n          const volume24h = parseFloat((tickerData as any).v[1]);\n          const change24h = currentPrice - openPrice;\n          const changePercent = openPrice > 0 ? ((change24h / openPrice) * 100).toFixed(2) : '0.00';\n          \n          normalizedTickers.push({\n            symbol: symbolMap[pairKey] || pairKey,\n            price: currentPrice.toFixed(2),\n            change24h: change24h.toFixed(2),\n            changePercent: changePercent,\n            volume: volume24h.toFixed(2),\n            timestamp: Date.now()\n          });\n        }\n      }\n      \n      res.json(normalizedTickers);\n    } catch (error) {\n      console.error('Market tickers error:', error);\n      res.status(500).json({ error: 'Failed to get market data' });\n    }\n  });\n\n  // OHLC candlestick data endpoint\n  app.get('/api/market/ohlc/:symbol', async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const { interval = '60' } = req.query; // Default to 60 minutes (1 hour)\n      \n      const krakenSymbol = SYMBOL_MAP[symbol] || symbol;\n      \n      // Kraken OHLC intervals: 1, 5, 15, 30, 60, 240, 1440, 10080, 21600\n      const data = await krakenRequest(`/0/public/OHLC?pair=${krakenSymbol}&interval=${interval}`);\n      \n      if (data.error && data.error.length > 0) {\n        return res.status(400).json({ error: data.error[0] });\n      }\n      \n      const result = data.result;\n      const pairKey = Object.keys(result).find(key => key !== 'last');\n      \n      if (!pairKey || !result[pairKey]) {\n        return res.status(404).json({ error: 'OHLC data not found' });\n      }\n      \n      // Kraken OHLC format: [time, open, high, low, close, vwap, volume, count]\n      const ohlcData = result[pairKey].map((candle: any[]) => ({\n        time: candle[0] * 1000, // Convert to milliseconds\n        open: parseFloat(candle[1]),\n        high: parseFloat(candle[2]),\n        low: parseFloat(candle[3]),\n        close: parseFloat(candle[4]),\n        volume: parseFloat(candle[6])\n      }));\n      \n      res.json({\n        symbol,\n        interval: parseInt(interval as string),\n        data: ohlcData\n      });\n    } catch (error) {\n      console.error('OHLC data error:', error);\n      res.status(500).json({ error: 'Failed to get OHLC data' });\n    }\n  });\n\n  // AI Signal routes\n  app.get('/api/ai/signals', async (req, res) => {\n    try {\n      const { symbol, includeInactive, limit } = req.query;\n      \n      if (includeInactive === 'true') {\n        // Return all signals (active and inactive) for historical data\n        const signals = await storage.getAllSignals({\n          symbol: symbol as string,\n          includeInactive: true,\n          limit: limit ? parseInt(limit as string, 10) : undefined\n        });\n        res.json({ signals });\n      } else {\n        // Return only active signals (default behavior)\n        const signals = await storage.getActiveSignals(symbol as string);\n        res.json({ signals });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get AI signals' });\n    }\n  });\n\n  app.put('/api/ai/signals/:id/dismiss', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      \n      const { id } = req.params;\n      \n      const signal = await storage.updateAiSignal(id, {\n        isActive: false\n      });\n      \n      res.json({ signal });\n    } catch (error) {\n      console.error('Failed to dismiss signal:', error);\n      res.status(500).json({ error: 'Failed to dismiss signal' });\n    }\n  });\n\n  app.post('/api/ai/analyze', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const { symbol, timeframe = '60' } = req.body;\n      \n      // Map frontend symbol to Kraken format\n      const krakenSymbol = SYMBOL_MAP[symbol] || symbol;\n      \n      // Get current market ticker data\n      const marketData = await krakenRequest(`/0/public/Ticker?pair=${krakenSymbol}`);\n      \n      if (marketData.error && marketData.error.length > 0) {\n        return res.status(400).json({ error: 'Invalid symbol' });\n      }\n\n      // Get OHLC historical data for technical analysis\n      const ohlcData = await krakenRequest(`/0/public/OHLC?pair=${krakenSymbol}&interval=${timeframe}`);\n      \n      if (ohlcData.error && ohlcData.error.length > 0) {\n        return res.status(400).json({ error: 'Failed to fetch historical data' });\n      }\n\n      const pairKey = Object.keys(marketData.result)[0];\n      const ticker = marketData.result[pairKey];\n      const currentPrice = parseFloat(ticker.c[0]);\n      const volume24h = parseFloat(ticker.v[1]);\n      const high24h = parseFloat(ticker.h[1]);\n      const low24h = parseFloat(ticker.l[1]);\n      \n      // Get OHLC candles\n      const ohlcPairKey = Object.keys(ohlcData.result).find(key => key !== 'last');\n      const candles = ohlcPairKey ? ohlcData.result[ohlcPairKey] : [];\n      \n      // Calculate technical indicators\n      const closes = candles.slice(-50).map((c: any) => parseFloat(c[4])); // Last 50 closes\n      const volumes = candles.slice(-50).map((c: any) => parseFloat(c[6]));\n      \n      // Simple Moving Average (SMA) - 20 period\n      const sma20 = closes.length >= 20 ? \n        closes.slice(-20).reduce((sum: number, val: number) => sum + val, 0) / 20 : \n        currentPrice;\n      \n      // Exponential Moving Average (EMA) - 12 period\n      const ema12 = calculateEMA(closes, 12);\n      const ema26 = calculateEMA(closes, 26);\n      \n      // RSI calculation - 14 period\n      const rsi = calculateRSI(closes, 14);\n      \n      // MACD\n      const macd = ema12 - ema26;\n      \n      // Volume trend\n      const avgVolume = volumes.length > 0 ? \n        volumes.reduce((sum: number, val: number) => sum + val, 0) / volumes.length : \n        0;\n      const volumeTrend = avgVolume > 0 ? ((volume24h - avgVolume) / avgVolume) * 100 : 0;\n      \n      // Price momentum\n      const priceChange24h = closes.length > 0 ? ((currentPrice - closes[0]) / closes[0]) * 100 : 0;\n      \n      // Support and resistance levels (simplified)\n      const recent20High = Math.max(...closes.slice(-20));\n      const recent20Low = Math.min(...closes.slice(-20));\n\n      // Prepare comprehensive analysis prompt\n      const analysisPrompt = `Analyze ${symbol} cryptocurrency and provide a professional trading recommendation.\n\nCURRENT MARKET DATA:\n- Current Price: $${currentPrice.toFixed(2)}\n- 24h High: $${high24h.toFixed(2)}\n- 24h Low: $${low24h.toFixed(2)}\n- 24h Volume: ${volume24h.toFixed(2)}\n- 24h Price Change: ${priceChange24h.toFixed(2)}%\n\nTECHNICAL INDICATORS:\n- RSI (14): ${rsi.toFixed(2)} ${rsi > 70 ? '(Overbought)' : rsi < 30 ? '(Oversold)' : '(Neutral)'}\n- SMA (20): $${sma20.toFixed(2)} - Price is ${currentPrice > sma20 ? 'above' : 'below'} SMA\n- EMA (12): $${ema12.toFixed(2)}\n- EMA (26): $${ema26.toFixed(2)}\n- MACD: ${macd.toFixed(2)} ${macd > 0 ? '(Bullish)' : '(Bearish)'}\n- Volume Trend: ${volumeTrend.toFixed(2)}% vs average\n- Support Level: $${recent20Low.toFixed(2)}\n- Resistance Level: $${recent20High.toFixed(2)}\n\nINSTRUCTIONS:\n1. Analyze the technical indicators and market conditions\n2. Determine if this is a BUY, SELL, or HOLD opportunity\n3. Set realistic entry, target, and stop-loss prices based on current levels\n4. Calculate risk/reward ratio (should be at least 2:1 for buy/sell signals)\n5. Provide clear reasoning based on the technical analysis\n6. Assign confidence level (0-100) based on signal strength\n\nRespond with JSON only in this exact format:\n{\n  \"signal\": \"buy|sell|hold\",\n  \"confidence\": number (0-100),\n  \"reasoning\": \"detailed explanation of analysis and why this signal was generated\",\n  \"entryPrice\": number (recommended entry price),\n  \"targetPrice\": number (profit target),\n  \"stopLoss\": number (stop loss level),\n  \"riskReward\": number (risk/reward ratio)\n}`;\n\n      // Using GPT-4o-mini for reliable AI analysis\n      const completion = await getOpenAI().chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a professional cryptocurrency trading analyst with expertise in technical analysis. You provide data-driven trading recommendations based on technical indicators, market conditions, and risk management principles. Always consider proper risk/reward ratios and realistic price targets.`\n          },\n          {\n            role: \"user\",\n            content: analysisPrompt\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const analysis = JSON.parse(completion.choices[0].message.content!);\n\n      // Store technical indicators with the signal\n      const indicators = {\n        rsi,\n        sma20,\n        ema12,\n        ema26,\n        macd,\n        volumeTrend,\n        priceChange24h,\n        currentPrice,\n        support: recent20Low,\n        resistance: recent20High\n      };\n\n      // Store AI signal\n      let signal = await storage.createAiSignal({\n        symbol, // Store normalized symbol (BTCUSD, not XXBTZUSD)\n        signal: analysis.signal,\n        confidence: analysis.confidence,\n        entryPrice: analysis.entryPrice?.toString() || currentPrice.toString(),\n        targetPrice: analysis.targetPrice?.toString() || \"0\",\n        stopLoss: analysis.stopLoss?.toString() || \"0\",\n        riskReward: analysis.riskReward?.toString() || \"0\",\n        reasoning: analysis.reasoning,\n        indicators,\n        isActive: true\n      });\n\n      // Set expiration time (24 hours from now)\n      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      signal = await storage.updateAiSignal(signal.id, { expiresAt });\n\n      res.json({ signal, analysis, indicators });\n    } catch (error) {\n      console.error('AI analysis error:', error);\n      res.status(500).json({ error: 'AI analysis failed' });\n    }\n  });\n\n  // Helper functions for technical indicators\n  function calculateEMA(prices: number[], period: number): number {\n    if (prices.length < period) return prices[prices.length - 1] || 0;\n    \n    const multiplier = 2 / (period + 1);\n    let ema = prices.slice(0, period).reduce((sum, price) => sum + price, 0) / period;\n    \n    for (let i = period; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    \n    return ema;\n  }\n\n  function calculateRSI(prices: number[], period: number = 14): number {\n    if (prices.length < period + 1) return 50; // Default neutral RSI\n    \n    let gains = 0;\n    let losses = 0;\n    \n    // Calculate initial average gain and loss\n    for (let i = 1; i <= period; i++) {\n      const change = prices[i] - prices[i - 1];\n      if (change > 0) gains += change;\n      else losses += Math.abs(change);\n    }\n    \n    let avgGain = gains / period;\n    let avgLoss = losses / period;\n    \n    // Calculate RSI for remaining periods\n    for (let i = period + 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      const gain = change > 0 ? change : 0;\n      const loss = change < 0 ? Math.abs(change) : 0;\n      \n      avgGain = (avgGain * (period - 1) + gain) / period;\n      avgLoss = (avgLoss * (period - 1) + loss) / period;\n    }\n    \n    if (avgLoss === 0) return 100;\n    const rs = avgGain / avgLoss;\n    return 100 - (100 / (1 + rs));\n  }\n\n  // Trading routes\n  app.post('/api/trade', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      const portfolio = await storage.getPortfolio(user.id);\n      if (!portfolio) {\n        return res.status(404).json({ error: 'Portfolio not found' });\n      }\n\n      const tradeData = insertTradeSchema.parse({\n        userId: user.id,\n        portfolioId: portfolio.id,\n        ...req.body\n      });\n\n      // For market orders, fetch current price from Kraken\n      let executionPrice = tradeData.price;\n      if (tradeData.type === 'market' && (!executionPrice || executionPrice === '0')) {\n        const krakenSymbol = SYMBOL_MAP[tradeData.symbol] || tradeData.symbol;\n        const tickerData = await krakenRequest(`/0/public/Ticker?pair=${krakenSymbol}`);\n        \n        if (tickerData.error && tickerData.error.length > 0) {\n          return res.status(400).json({ error: 'Failed to fetch current market price' });\n        }\n        \n        const pairKey = Object.keys(tickerData.result)[0];\n        const currentPrice = parseFloat(tickerData.result[pairKey].c[0]);\n        executionPrice = currentPrice.toString();\n      }\n\n      // Ensure tradeData.price is set to executionPrice for all downstream operations\n      tradeData.price = executionPrice;\n\n      // Final validation: ensure we have a valid numeric price before proceeding\n      if (!tradeData.price || isNaN(parseFloat(tradeData.price)) || parseFloat(tradeData.price) <= 0) {\n        return res.status(400).json({ \n          error: 'Invalid execution price. Cannot process trade without a valid price.' \n        });\n      }\n\n      // Risk management validation\n      const tradeValue = parseFloat(tradeData.amount) * parseFloat(tradeData.price);\n      const riskSettings = (user.riskSettings as RiskSettings) || {};\n      const riskCheck = await validateRiskLimits(\n        user.id,\n        portfolio.id,\n        tradeValue,\n        tradeData.side,\n        tradeData.symbol,\n        riskSettings\n      );\n\n      if (!riskCheck.allowed) {\n        return res.status(403).json({ \n          error: 'Trade blocked by risk management',\n          reason: riskCheck.reason \n        });\n      }\n\n      let trade;\n      \n      if (user.isDemo) {\n        // Demo mode - simulate trade execution\n        trade = await storage.createTrade({\n          ...tradeData,\n          status: 'filled',\n          krakenOrderId: `demo_${Date.now()}`,\n          metadata: { demo: true }\n        });\n\n        // Update portfolio balances for demo\n        const amount = parseFloat(tradeData.amount);\n        const price = parseFloat(tradeData.price);\n        const value = amount * price;\n\n        // Update portfolio balances and holdings for demo trades\n        const availableBalance = parseFloat(portfolio.availableBalance || '0');\n        const tradingBalance = parseFloat(portfolio.tradingBalance || '0');\n        \n        if (tradeData.side === 'buy') {\n          // Deduct cash, increase trading balance\n          const newAvailable = availableBalance - value;\n          const newTrading = tradingBalance + value;\n          \n          await storage.updatePortfolio(portfolio.id, {\n            availableBalance: newAvailable.toString(),\n            tradingBalance: newTrading.toString(),\n            totalBalance: (newAvailable + newTrading).toString()\n          });\n          \n          // Create or update holding\n          const existingHolding = await storage.getHoldingBySymbol(portfolio.id, tradeData.symbol);\n          if (existingHolding) {\n            // Update existing holding with new average price\n            const currentValue = parseFloat(existingHolding.amount) * parseFloat(existingHolding.averagePrice);\n            const newTotalAmount = parseFloat(existingHolding.amount) + amount;\n            const newAveragePrice = ((currentValue + value) / newTotalAmount).toFixed(6);\n            \n            await storage.updateHolding(existingHolding.id, {\n              amount: newTotalAmount.toString(),\n              averagePrice: newAveragePrice,\n              currentPrice: tradeData.price,\n              value: (newTotalAmount * parseFloat(tradeData.price)).toFixed(2)\n            });\n          } else {\n            // Create new holding\n            await storage.createHolding({\n              portfolioId: portfolio.id,\n              symbol: tradeData.symbol,\n              amount: tradeData.amount,\n              averagePrice: tradeData.price,\n              currentPrice: tradeData.price,\n              value: value.toFixed(2)\n            });\n          }\n          \n        } else if (tradeData.side === 'sell') {\n          // Add cash from sale, reduce trading balance\n          const newAvailable = availableBalance + value;\n          const newTrading = Math.max(0, tradingBalance - value);\n          \n          await storage.updatePortfolio(portfolio.id, {\n            availableBalance: newAvailable.toString(),\n            tradingBalance: newTrading.toString(),\n            totalBalance: (newAvailable + newTrading).toString()\n          });\n          \n          // Update or remove holding\n          const existingHolding = await storage.getHoldingBySymbol(portfolio.id, tradeData.symbol);\n          if (existingHolding) {\n            const newAmount = parseFloat(existingHolding.amount) - amount;\n            if (newAmount <= 0) {\n              // Remove holding if sold completely\n              await storage.deleteHolding(existingHolding.id);\n            } else {\n              // Update holding with reduced amount\n              await storage.updateHolding(existingHolding.id, {\n                amount: newAmount.toString(),\n                currentPrice: tradeData.price,\n                value: (newAmount * parseFloat(tradeData.price)).toFixed(2)\n              });\n            }\n          }\n        }\n      } else {\n        // Live mode - execute real trade via Kraken API\n        if (!user.krakenApiKey || !user.krakenApiSecret) {\n          return res.status(400).json({ error: 'Kraken API keys not configured' });\n        }\n\n        // Map user-friendly symbol to Kraken's internal pair code\n        const krakenSymbol = SYMBOL_MAP[tradeData.symbol] || tradeData.symbol;\n\n        const orderData = {\n          pair: krakenSymbol,\n          type: tradeData.side,\n          ordertype: tradeData.type,\n          volume: tradeData.amount,\n          ...(tradeData.type === 'limit' ? { price: tradeData.price } : {})\n        };\n\n        const orderResult = await krakenRequest(\n          '/0/private/AddOrder', \n          orderData, \n          user.krakenApiKey!, \n          user.krakenApiSecret!\n        );\n\n        if (orderResult.error && orderResult.error.length > 0) {\n          return res.status(400).json({ error: orderResult.error[0] });\n        }\n\n        trade = await storage.createTrade({\n          ...tradeData,\n          status: 'pending',\n          krakenOrderId: orderResult.result.txid[0],\n          metadata: { kraken: true }\n        });\n      }\n\n      // Note: WebSocket broadcasting disabled for security - trade data should only be sent to authorized users\n\n      res.json({ trade });\n    } catch (error) {\n      console.error('Trade error:', error);\n      res.status(500).json({ error: 'Trade execution failed' });\n    }\n  });\n\n  app.get('/api/trades', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Parse query parameters for pagination and filtering\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const symbol = req.query.symbol as string;\n      const side = req.query.side as string;\n      const status = req.query.status as string;\n      const sortBy = (req.query.sortBy as string) || 'createdAt';\n      const sortOrder = (req.query.sortOrder as string) || 'desc';\n\n      // Fetch database trades\n      let dbTrades = await storage.getTrades(user.id, 1000); // Get more for merging\n\n      // For live mode users with Kraken credentials, fetch and merge Kraken trade history\n      if (!user.isDemo && user.krakenApiKey && user.krakenApiSecret) {\n        try {\n          const krakenTrades = await getKrakenTradeHistory(\n            user.krakenApiKey,\n            user.krakenApiSecret,\n            {}\n          );\n\n          // Create a map of database trades by krakenOrderId for deduplication\n          const dbTradesByKrakenId = new Map(\n            dbTrades\n              .filter(t => t.krakenOrderId)\n              .map(t => [t.krakenOrderId, t])\n          );\n\n          // Merge: Only add Kraken trades that aren't already in our database\n          for (const krakenTrade of krakenTrades) {\n            if (!dbTradesByKrakenId.has(krakenTrade.krakenOrderId)) {\n              // Add missing fields to match our schema\n              dbTrades.push({\n                ...krakenTrade,\n                userId: user.id,\n                portfolioId: '', // Kraken trades don't have portfolio mapping\n              } as any);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching Kraken trade history:', error);\n          // Continue with database trades only\n        }\n      }\n\n      // Apply filters\n      let filteredTrades = dbTrades;\n      \n      if (symbol) {\n        filteredTrades = filteredTrades.filter(t => t.symbol === symbol);\n      }\n      \n      if (side) {\n        filteredTrades = filteredTrades.filter(t => t.side === side);\n      }\n      \n      if (status) {\n        filteredTrades = filteredTrades.filter(t => t.status === status);\n      }\n\n      // Apply sorting\n      filteredTrades.sort((a, b) => {\n        let aValue = a[sortBy as keyof typeof a];\n        let bValue = b[sortBy as keyof typeof b];\n        \n        // Handle date sorting\n        if (sortBy === 'createdAt' || sortBy === 'filledAt') {\n          aValue = aValue ? new Date(aValue).getTime() : 0;\n          bValue = bValue ? new Date(bValue).getTime() : 0;\n        }\n        \n        const comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n        return sortOrder === 'asc' ? comparison : -comparison;\n      });\n\n      // Apply pagination\n      const total = filteredTrades.length;\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedTrades = filteredTrades.slice(startIndex, endIndex);\n\n      res.json({ \n        trades: paginatedTrades,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('Trade history error:', error);\n      res.status(500).json({ error: 'Failed to get trades' });\n    }\n  });\n\n  // Trading strategies\n  app.get('/api/strategies', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      const strategies = await storage.getUserStrategies(user.id);\n      res.json({ strategies });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get strategies' });\n    }\n  });\n\n  // Settings routes\n  app.post('/api/settings/kraken', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Validate request body\n      const settingsSchema = z.object({\n        apiKey: z.string().min(1, 'API key is required'),\n        apiSecret: z.string().min(1, 'API secret is required')\n      });\n      const { apiKey, apiSecret } = settingsSchema.parse(req.body);\n      \n      // Test API keys by making a balance request\n      const balanceResult = await krakenRequest('/0/private/Balance', {}, apiKey, apiSecret);\n      \n      if (balanceResult.error && balanceResult.error.length > 0) {\n        return res.status(400).json({ error: 'Invalid API keys' });\n      }\n\n      await storage.updateUser(user.id, {\n        krakenApiKey: apiKey,\n        krakenApiSecret: apiSecret\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update API keys' });\n    }\n  });\n\n  app.post('/api/settings/mode', requireAuth, async (req, res) => {\n    try {\n      if (!req.firebaseUid) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const user = await storage.getUserByFirebaseUid(req.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Validate request body\n      const modeSchema = z.object({\n        isDemo: z.boolean()\n      });\n      const { isDemo } = modeSchema.parse(req.body);\n      \n      await storage.updateUser(user.id, { isDemo });\n      \n      const portfolio = await storage.getPortfolio(user.id);\n      if (portfolio) {\n        await storage.updatePortfolio(portfolio.id, { isDemo });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update mode' });\n    }\n  });\n\n  // Real-time price updates from Kraken API via WebSocket\n  async function fetchAndBroadcastPrices() {\n    try {\n      const pairs = 'XXBTZUSD,XETHZUSD,ADAUSD,SOLUSD,DOTUSD,LINKUSD';\n      const data = await krakenRequest(`/0/public/Ticker?pair=${pairs}`);\n      \n      if (data.error && data.error.length > 0) {\n        console.error('Kraken API error:', data.error);\n        return;\n      }\n\n      const priceUpdates: any = {};\n      \n      for (const [krakenSymbol, tickerData] of Object.entries(data.result)) {\n        const displaySymbol = DISPLAY_MAP[krakenSymbol] || krakenSymbol;\n        const ticker = tickerData as any;\n        \n        priceUpdates[displaySymbol] = {\n          price: parseFloat(ticker.c[0]),\n          change24h: parseFloat(ticker.c[0]) - parseFloat(ticker.o),\n          volume: parseFloat(ticker.v[1]),\n          high24h: parseFloat(ticker.h[1]),\n          low24h: parseFloat(ticker.l[1]),\n          timestamp: Date.now()\n        };\n      }\n\n      broadcast({\n        type: 'price_update',\n        data: priceUpdates\n      });\n    } catch (error) {\n      console.error('Failed to fetch prices for WebSocket:', error);\n    }\n  }\n\n  // Broadcast real prices every 5 seconds\n  setInterval(fetchAndBroadcastPrices, 5000);\n  // Initial broadcast\n  fetchAndBroadcastPrices();\n\n  return httpServer;\n}\n","size_bytes":43663},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Portfolio,\n  type InsertPortfolio,\n  type Holding,\n  type InsertHolding,\n  type Trade,\n  type InsertTrade,\n  type AiSignal,\n  type InsertAiSignal,\n  type TradingStrategy,\n  type InsertTradingStrategy,\n  users,\n  portfolios,\n  holdings,\n  trades,\n  aiSignals,\n  tradingStrategies\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Portfolio operations\n  getPortfolio(userId: string): Promise<Portfolio | undefined>;\n  createPortfolio(portfolio: InsertPortfolio): Promise<Portfolio>;\n  updatePortfolio(id: string, updates: Partial<Portfolio>): Promise<Portfolio>;\n\n  // Holdings operations\n  getHoldings(portfolioId: string): Promise<Holding[]>;\n  getHolding(portfolioId: string, symbol: string): Promise<Holding | undefined>;\n  getHoldingBySymbol(portfolioId: string, symbol: string): Promise<Holding | undefined>;\n  createHolding(holding: InsertHolding): Promise<Holding>;\n  updateHolding(id: string, updates: Partial<Holding>): Promise<Holding>;\n  deleteHolding(id: string): Promise<void>;\n\n  // Trade operations\n  getTrades(userId: string, limit?: number): Promise<Trade[]>;\n  createTrade(trade: InsertTrade): Promise<Trade>;\n  updateTrade(id: string, updates: Partial<Trade>): Promise<Trade>;\n\n  // AI Signal operations\n  getActiveSignals(symbol?: string): Promise<AiSignal[]>;\n  getAllSignals(options?: { symbol?: string; includeInactive?: boolean; limit?: number }): Promise<AiSignal[]>;\n  createAiSignal(signal: InsertAiSignal): Promise<AiSignal>;\n  updateAiSignal(id: string, updates: Partial<AiSignal>): Promise<AiSignal>;\n\n  // Trading Strategy operations\n  getUserStrategies(userId: string): Promise<TradingStrategy[]>;\n  createTradingStrategy(strategy: InsertTradingStrategy): Promise<TradingStrategy>;\n  updateTradingStrategy(id: string, updates: Partial<TradingStrategy>): Promise<TradingStrategy>;\n}\n\nexport class PostgreSQLStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    if (!result[0]) throw new Error(\"User not found\");\n    return result[0];\n  }\n\n  // Portfolio operations\n  async getPortfolio(userId: string): Promise<Portfolio | undefined> {\n    const result = await db.select().from(portfolios).where(eq(portfolios.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createPortfolio(insertPortfolio: InsertPortfolio): Promise<Portfolio> {\n    const result = await db.insert(portfolios).values(insertPortfolio).returning();\n    return result[0];\n  }\n\n  async updatePortfolio(id: string, updates: Partial<Portfolio>): Promise<Portfolio> {\n    const result = await db.update(portfolios).set({\n      ...updates,\n      updatedAt: new Date()\n    }).where(eq(portfolios.id, id)).returning();\n    if (!result[0]) throw new Error(\"Portfolio not found\");\n    return result[0];\n  }\n\n  // Holdings operations\n  async getHoldings(portfolioId: string): Promise<Holding[]> {\n    return await db.select().from(holdings).where(eq(holdings.portfolioId, portfolioId));\n  }\n\n  async getHolding(portfolioId: string, symbol: string): Promise<Holding | undefined> {\n    const result = await db.select().from(holdings)\n      .where(and(eq(holdings.portfolioId, portfolioId), eq(holdings.symbol, symbol)))\n      .limit(1);\n    return result[0];\n  }\n\n  async getHoldingBySymbol(portfolioId: string, symbol: string): Promise<Holding | undefined> {\n    return this.getHolding(portfolioId, symbol);\n  }\n\n  async createHolding(insertHolding: InsertHolding): Promise<Holding> {\n    const result = await db.insert(holdings).values(insertHolding).returning();\n    return result[0];\n  }\n\n  async updateHolding(id: string, updates: Partial<Holding>): Promise<Holding> {\n    const result = await db.update(holdings).set({\n      ...updates,\n      updatedAt: new Date()\n    }).where(eq(holdings.id, id)).returning();\n    if (!result[0]) throw new Error(\"Holding not found\");\n    return result[0];\n  }\n\n  async deleteHolding(id: string): Promise<void> {\n    await db.delete(holdings).where(eq(holdings.id, id));\n  }\n\n  // Trade operations\n  async getTrades(userId: string, limit: number = 50): Promise<Trade[]> {\n    return await db.select().from(trades)\n      .where(eq(trades.userId, userId))\n      .orderBy(desc(trades.createdAt))\n      .limit(limit);\n  }\n\n  async createTrade(insertTrade: InsertTrade): Promise<Trade> {\n    const result = await db.insert(trades).values(insertTrade).returning();\n    return result[0];\n  }\n\n  async updateTrade(id: string, updates: Partial<Trade>): Promise<Trade> {\n    const updateData: any = { ...updates };\n    if (updates.status === 'filled') {\n      updateData.filledAt = new Date();\n    }\n    \n    const result = await db.update(trades).set(updateData).where(eq(trades.id, id)).returning();\n    if (!result[0]) throw new Error(\"Trade not found\");\n    return result[0];\n  }\n\n  // AI Signal operations\n  async getActiveSignals(symbol?: string): Promise<AiSignal[]> {\n    if (symbol) {\n      return await db.select().from(aiSignals)\n        .where(and(eq(aiSignals.isActive, true), eq(aiSignals.symbol, symbol)))\n        .orderBy(desc(aiSignals.createdAt));\n    }\n    \n    return await db.select().from(aiSignals)\n      .where(eq(aiSignals.isActive, true))\n      .orderBy(desc(aiSignals.createdAt));\n  }\n\n  async createAiSignal(insertSignal: InsertAiSignal): Promise<AiSignal> {\n    const result = await db.insert(aiSignals).values(insertSignal).returning();\n    return result[0];\n  }\n\n  async updateAiSignal(id: string, updates: Partial<AiSignal>): Promise<AiSignal> {\n    const result = await db.update(aiSignals).set(updates).where(eq(aiSignals.id, id)).returning();\n    if (!result[0]) throw new Error(\"AI Signal not found\");\n    return result[0];\n  }\n\n  async getAllSignals(options?: {\n    symbol?: string;\n    includeInactive?: boolean;\n    limit?: number;\n  }): Promise<AiSignal[]> {\n    let query = db.select().from(aiSignals);\n    \n    const conditions = [];\n    if (options?.symbol) {\n      conditions.push(eq(aiSignals.symbol, options.symbol));\n    }\n    if (!options?.includeInactive) {\n      conditions.push(eq(aiSignals.isActive, true));\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    }\n    \n    query = query.orderBy(desc(aiSignals.createdAt));\n    \n    if (options?.limit) {\n      query = query.limit(options.limit);\n    }\n    \n    return await query;\n  }\n\n  // Trading Strategy operations\n  async getUserStrategies(userId: string): Promise<TradingStrategy[]> {\n    return await db.select().from(tradingStrategies).where(eq(tradingStrategies.userId, userId));\n  }\n\n  async createTradingStrategy(insertStrategy: InsertTradingStrategy): Promise<TradingStrategy> {\n    const result = await db.insert(tradingStrategies).values(insertStrategy).returning();\n    return result[0];\n  }\n\n  async updateTradingStrategy(id: string, updates: Partial<TradingStrategy>): Promise<TradingStrategy> {\n    const result = await db.update(tradingStrategies).set({\n      ...updates,\n      updatedAt: new Date()\n    }).where(eq(tradingStrategies.id, id)).returning();\n    if (!result[0]) throw new Error(\"Trading Strategy not found\");\n    return result[0];\n  }\n}\n\n// Keep the in-memory implementation for backwards compatibility\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private portfolios: Map<string, Portfolio> = new Map();\n  private holdings: Map<string, Holding> = new Map();\n  private trades: Map<string, Trade> = new Map();\n  private aiSignals: Map<string, AiSignal> = new Map();\n  private strategies: Map<string, TradingStrategy> = new Map();\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.firebaseUid === firebaseUid);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      displayName: insertUser.displayName || null,\n      photoURL: insertUser.photoURL || null,\n      krakenApiKey: insertUser.krakenApiKey || null,\n      krakenApiSecret: insertUser.krakenApiSecret || null,\n      isDemo: insertUser.isDemo ?? true,\n      riskSettings: insertUser.riskSettings || {},\n      id,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Portfolio operations\n  async getPortfolio(userId: string): Promise<Portfolio | undefined> {\n    return Array.from(this.portfolios.values()).find(p => p.userId === userId);\n  }\n\n  async createPortfolio(insertPortfolio: InsertPortfolio): Promise<Portfolio> {\n    const id = randomUUID();\n    const portfolio: Portfolio = { \n      ...insertPortfolio,\n      isDemo: insertPortfolio.isDemo ?? true,\n      totalBalance: insertPortfolio.totalBalance || \"0\",\n      availableBalance: insertPortfolio.availableBalance || \"0\",\n      tradingBalance: insertPortfolio.tradingBalance || \"0\",\n      pnl24h: insertPortfolio.pnl24h || \"0\",\n      pnlPercentage24h: insertPortfolio.pnlPercentage24h || \"0\",\n      id,\n      updatedAt: new Date()\n    };\n    this.portfolios.set(id, portfolio);\n    return portfolio;\n  }\n\n  async updatePortfolio(id: string, updates: Partial<Portfolio>): Promise<Portfolio> {\n    const portfolio = this.portfolios.get(id);\n    if (!portfolio) throw new Error(\"Portfolio not found\");\n    const updatedPortfolio = { ...portfolio, ...updates, updatedAt: new Date() };\n    this.portfolios.set(id, updatedPortfolio);\n    return updatedPortfolio;\n  }\n\n  // Holdings operations\n  async getHoldings(portfolioId: string): Promise<Holding[]> {\n    return Array.from(this.holdings.values()).filter(h => h.portfolioId === portfolioId);\n  }\n\n  async getHolding(portfolioId: string, symbol: string): Promise<Holding | undefined> {\n    return Array.from(this.holdings.values()).find(h => h.portfolioId === portfolioId && h.symbol === symbol);\n  }\n\n  async getHoldingBySymbol(portfolioId: string, symbol: string): Promise<Holding | undefined> {\n    return this.getHolding(portfolioId, symbol);\n  }\n\n  async createHolding(insertHolding: InsertHolding): Promise<Holding> {\n    const id = randomUUID();\n    const holding: Holding = { \n      ...insertHolding,\n      pnl: insertHolding.pnl || \"0\",\n      pnlPercentage: insertHolding.pnlPercentage || \"0\",\n      id,\n      updatedAt: new Date()\n    };\n    this.holdings.set(id, holding);\n    return holding;\n  }\n\n  async updateHolding(id: string, updates: Partial<Holding>): Promise<Holding> {\n    const holding = this.holdings.get(id);\n    if (!holding) throw new Error(\"Holding not found\");\n    const updatedHolding = { ...holding, ...updates, updatedAt: new Date() };\n    this.holdings.set(id, updatedHolding);\n    return updatedHolding;\n  }\n\n  async deleteHolding(id: string): Promise<void> {\n    this.holdings.delete(id);\n  }\n\n  // Trade operations\n  async getTrades(userId: string, limit: number = 50): Promise<Trade[]> {\n    const userTrades = Array.from(this.trades.values()).filter(t => t.userId === userId);\n    return userTrades.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()).slice(0, limit);\n  }\n\n  async createTrade(insertTrade: InsertTrade): Promise<Trade> {\n    const id = randomUUID();\n    const trade: Trade = { \n      ...insertTrade,\n      fee: insertTrade.fee || \"0\",\n      isDemo: insertTrade.isDemo ?? true,\n      isAiGenerated: insertTrade.isAiGenerated ?? false,\n      krakenOrderId: insertTrade.krakenOrderId || null,\n      metadata: insertTrade.metadata || {},\n      id,\n      createdAt: new Date(),\n      filledAt: null\n    };\n    this.trades.set(id, trade);\n    return trade;\n  }\n\n  async updateTrade(id: string, updates: Partial<Trade>): Promise<Trade> {\n    const trade = this.trades.get(id);\n    if (!trade) throw new Error(\"Trade not found\");\n    const updatedTrade = { ...trade, ...updates };\n    if (updates.status === 'filled' && !trade.filledAt) {\n      updatedTrade.filledAt = new Date();\n    }\n    this.trades.set(id, updatedTrade);\n    return updatedTrade;\n  }\n\n  // AI Signal operations\n  async getActiveSignals(symbol?: string): Promise<AiSignal[]> {\n    let signals = Array.from(this.aiSignals.values()).filter(s => s.isActive);\n    if (symbol) {\n      signals = signals.filter(s => s.symbol === symbol);\n    }\n    return signals.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createAiSignal(insertSignal: InsertAiSignal): Promise<AiSignal> {\n    const id = randomUUID();\n    const signal: AiSignal = { \n      ...insertSignal,\n      entryPrice: insertSignal.entryPrice || \"0\",\n      targetPrice: insertSignal.targetPrice || \"0\",\n      stopLoss: insertSignal.stopLoss || \"0\",\n      riskReward: insertSignal.riskReward || \"0\",\n      reasoning: insertSignal.reasoning || null,\n      indicators: insertSignal.indicators || {},\n      isActive: insertSignal.isActive ?? true,\n      id,\n      createdAt: new Date(),\n      expiresAt: null\n    };\n    this.aiSignals.set(id, signal);\n    return signal;\n  }\n\n  async updateAiSignal(id: string, updates: Partial<AiSignal>): Promise<AiSignal> {\n    const signal = this.aiSignals.get(id);\n    if (!signal) throw new Error(\"AI Signal not found\");\n    const updatedSignal = { ...signal, ...updates };\n    this.aiSignals.set(id, updatedSignal);\n    return updatedSignal;\n  }\n\n  async getAllSignals(options?: {\n    symbol?: string;\n    includeInactive?: boolean;\n    limit?: number;\n  }): Promise<AiSignal[]> {\n    let signals = Array.from(this.aiSignals.values());\n    \n    if (options?.symbol) {\n      signals = signals.filter(s => s.symbol === options.symbol);\n    }\n    \n    if (!options?.includeInactive) {\n      signals = signals.filter(s => s.isActive);\n    }\n    \n    signals = signals.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n    \n    if (options?.limit) {\n      signals = signals.slice(0, options.limit);\n    }\n    \n    return signals;\n  }\n\n  // Trading Strategy operations\n  async getUserStrategies(userId: string): Promise<TradingStrategy[]> {\n    return Array.from(this.strategies.values()).filter(s => s.userId === userId);\n  }\n\n  async createTradingStrategy(insertStrategy: InsertTradingStrategy): Promise<TradingStrategy> {\n    const id = randomUUID();\n    const strategy: TradingStrategy = { \n      ...insertStrategy,\n      description: insertStrategy.description || null,\n      isActive: insertStrategy.isActive ?? false,\n      performance: insertStrategy.performance || {},\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.strategies.set(id, strategy);\n    return strategy;\n  }\n\n  async updateTradingStrategy(id: string, updates: Partial<TradingStrategy>): Promise<TradingStrategy> {\n    const strategy = this.strategies.get(id);\n    if (!strategy) throw new Error(\"Trading Strategy not found\");\n    const updatedStrategy = { ...strategy, ...updates, updatedAt: new Date() };\n    this.strategies.set(id, updatedStrategy);\n    return updatedStrategy;\n  }\n}\n\n// Use PostgreSQL storage for production\nexport const storage = new PostgreSQLStorage();","size_bytes":16490},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  displayName: text(\"display_name\"),\n  photoURL: text(\"photo_url\"),\n  isDemo: boolean(\"is_demo\").default(true),\n  krakenApiKey: text(\"kraken_api_key\"),\n  krakenApiSecret: text(\"kraken_api_secret\"),\n  riskSettings: jsonb(\"risk_settings\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const portfolios = pgTable(\"portfolios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  totalBalance: decimal(\"total_balance\", { precision: 20, scale: 8 }).default(\"0\"),\n  availableBalance: decimal(\"available_balance\", { precision: 20, scale: 8 }).default(\"0\"),\n  tradingBalance: decimal(\"trading_balance\", { precision: 20, scale: 8 }).default(\"0\"),\n  pnl24h: decimal(\"pnl_24h\", { precision: 20, scale: 8 }).default(\"0\"),\n  pnlPercentage24h: decimal(\"pnl_percentage_24h\", { precision: 8, scale: 4 }).default(\"0\"),\n  isDemo: boolean(\"is_demo\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const holdings = pgTable(\"holdings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  portfolioId: varchar(\"portfolio_id\").references(() => portfolios.id).notNull(),\n  symbol: text(\"symbol\").notNull(),\n  amount: decimal(\"amount\", { precision: 20, scale: 8 }).notNull(),\n  averagePrice: decimal(\"average_price\", { precision: 20, scale: 8 }).notNull(),\n  currentPrice: decimal(\"current_price\", { precision: 20, scale: 8 }).notNull(),\n  value: decimal(\"value\", { precision: 20, scale: 8 }).notNull(),\n  pnl: decimal(\"pnl\", { precision: 20, scale: 8 }).default(\"0\"),\n  pnlPercentage: decimal(\"pnl_percentage\", { precision: 8, scale: 4 }).default(\"0\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const trades = pgTable(\"trades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  portfolioId: varchar(\"portfolio_id\").references(() => portfolios.id).notNull(),\n  symbol: text(\"symbol\").notNull(),\n  side: text(\"side\").notNull(), // 'buy' or 'sell'\n  type: text(\"type\").notNull(), // 'market', 'limit', 'stop-loss'\n  amount: decimal(\"amount\", { precision: 20, scale: 8 }).notNull(),\n  price: decimal(\"price\", { precision: 20, scale: 8 }).notNull(),\n  fee: decimal(\"fee\", { precision: 20, scale: 8 }).default(\"0\"),\n  status: text(\"status\").notNull(), // 'pending', 'filled', 'cancelled'\n  isDemo: boolean(\"is_demo\").default(true),\n  isAiGenerated: boolean(\"is_ai_generated\").default(false),\n  krakenOrderId: text(\"kraken_order_id\"),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  filledAt: timestamp(\"filled_at\"),\n});\n\nexport const aiSignals = pgTable(\"ai_signals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  symbol: text(\"symbol\").notNull(),\n  signal: text(\"signal\").notNull(), // 'buy', 'sell', 'hold'\n  confidence: integer(\"confidence\").notNull(), // 0-100\n  entryPrice: decimal(\"entry_price\", { precision: 20, scale: 8 }),\n  targetPrice: decimal(\"target_price\", { precision: 20, scale: 8 }),\n  stopLoss: decimal(\"stop_loss\", { precision: 20, scale: 8 }),\n  riskReward: decimal(\"risk_reward\", { precision: 8, scale: 2 }),\n  reasoning: text(\"reasoning\"),\n  indicators: jsonb(\"indicators\").default({}),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\nexport const tradingStrategies = pgTable(\"trading_strategies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  symbol: text(\"symbol\").notNull(),\n  strategy: text(\"strategy\").notNull(), // 'rsi', 'moving_average', 'grid'\n  parameters: jsonb(\"parameters\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  performance: jsonb(\"performance\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPortfolioSchema = createInsertSchema(portfolios).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertHoldingSchema = createInsertSchema(holdings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertTradeSchema = createInsertSchema(trades).omit({\n  id: true,\n  createdAt: true,\n  filledAt: true,\n});\n\nexport const insertAiSignalSchema = createInsertSchema(aiSignals).omit({\n  id: true,\n  createdAt: true,\n  expiresAt: true,\n});\n\nexport const insertTradingStrategySchema = createInsertSchema(tradingStrategies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Portfolio = typeof portfolios.$inferSelect;\nexport type InsertPortfolio = z.infer<typeof insertPortfolioSchema>;\n\nexport type Holding = typeof holdings.$inferSelect;\nexport type InsertHolding = z.infer<typeof insertHoldingSchema>;\n\nexport type Trade = typeof trades.$inferSelect;\nexport type InsertTrade = z.infer<typeof insertTradeSchema>;\n\nexport type AiSignal = typeof aiSignals.$inferSelect;\nexport type InsertAiSignal = z.infer<typeof insertAiSignalSchema>;\n\nexport type TradingStrategy = typeof tradingStrategies.$inferSelect;\nexport type InsertTradingStrategy = z.infer<typeof insertTradingStrategySchema>;\n\n// Public user type without sensitive data\nexport interface PublicUser {\n  id: string;\n  firebaseUid: string;\n  email: string;\n  displayName: string | null;\n  photoURL: string | null;\n  isDemo: boolean | null;\n  createdAt: Date | null;\n}\n\n// Function to convert User to PublicUser (sanitize sensitive data)\nexport function sanitizeUser(user: User): PublicUser {\n  const { krakenApiKey, krakenApiSecret, riskSettings, ...publicUser } = user;\n  return publicUser;\n}\n","size_bytes":6450},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport AITrading from \"@/pages/ai-trading\";\nimport Portfolio from \"@/pages/portfolio\";\nimport Trades from \"@/pages/trades\";\nimport Settings from \"@/pages/settings\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse\">\n            <div className=\"w-8 h-8 bg-primary rounded-full\"></div>\n          </div>\n          <p className=\"text-muted-foreground\">Loading CryptoBot Pro...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/ai-trading\">\n        <ProtectedRoute>\n          <AITrading />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/portfolio\">\n        <ProtectedRoute>\n          <Portfolio />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/trades\">\n        <ProtectedRoute>\n          <Trades />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2488},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(210 40% 96%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 84% 4%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 46%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 84% 4%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 96%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(217 91% 60%);\n  --success: hsl(142 76% 36%);\n  --warning: hsl(38 92% 50%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(142 76% 36%);\n  --chart-3: hsl(38 92% 50%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(280 100% 70%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 84% 4%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(210 40% 96%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 84% 4%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 1px -1px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 84% 4%);\n  --foreground: hsl(210 40% 96%);\n  --card: hsl(222 84% 8%);\n  --card-foreground: hsl(210 40% 96%);\n  --popover: hsl(222 84% 8%);\n  --popover-foreground: hsl(210 40% 96%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 84% 4%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 96%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 32% 17%);\n  --accent-foreground: hsl(210 40% 96%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 96%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(217 91% 60%);\n  --success: hsl(142 76% 36%);\n  --warning: hsl(38 92% 50%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(142 76% 36%);\n  --chart-3: hsl(38 92% 50%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(280 100% 70%);\n  --sidebar: hsl(222 84% 8%);\n  --sidebar-foreground: hsl(210 40% 96%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(222 84% 4%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 96%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.1);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.1), 0px 1px 1px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.2), 0px 2px 4px -2px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.2), 0px 4px 6px -4px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.2), 0px 8px 10px -6px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.4);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .chart-container {\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%);\n  }\n\n  .profit {\n    @apply text-success;\n  }\n\n  .loss {\n    @apply text-destructive;\n  }\n  \n  .sidebar-scroll::-webkit-scrollbar {\n    width: 4px;\n  }\n  \n  .sidebar-scroll::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n  \n  .sidebar-scroll::-webkit-scrollbar-thumb {\n    background: hsl(var(--border));\n    border-radius: 2px;\n  }\n\n  @keyframes pulse-slow {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse-slow 2s infinite;\n  }\n}\n","size_bytes":5047},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light';\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n}\n\ninterface ThemeProviderState {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst initialState: ThemeProviderState = {\n  theme: 'dark',\n  setTheme: () => null,\n  toggleTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'dark',\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem('theme') as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    root.setAttribute('data-theme', theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem('theme', theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === 'dark' ? 'light' : 'dark';\n      localStorage.setItem('theme', newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider');\n\n  return context;\n};\n","size_bytes":1574},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { \n  signInWithPopup, \n  GoogleAuthProvider, \n  signInAnonymously,\n  onAuthStateChanged, \n  signOut as firebaseSignOut,\n  type User as FirebaseUser \n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { type User } from '@shared/schema';\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setFirebaseUser(firebaseUser);\n      \n      if (firebaseUser) {\n        localStorage.setItem('firebase-uid', firebaseUser.uid);\n        \n        try {\n          // Get Firebase ID token and login/register with backend\n          const idToken = await firebaseUser.getIdToken();\n          localStorage.setItem('firebase-token', idToken);\n          \n          const response = await fetch('/api/auth/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${idToken}`\n            },\n            body: JSON.stringify({}), // User info is now extracted from token\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            setUser(data.user);\n          }\n        } catch (error) {\n          console.error('Backend login failed:', error);\n        }\n      } else {\n        localStorage.removeItem('firebase-uid');\n        setUser(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signIn = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      await signInWithPopup(auth, provider);\n    } catch (error) {\n      console.error('Sign in failed:', error);\n      throw error;\n    }\n  };\n\n  const signInAnonymouslyMethod = async () => {\n    try {\n      await signInAnonymously(auth);\n    } catch (error) {\n      console.error('Anonymous sign in failed:', error);\n      throw error;\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await firebaseSignOut(auth);\n      setUser(null);\n    } catch (error) {\n      console.error('Sign out failed:', error);\n      throw error;\n    }\n  };\n\n  return {\n    user,\n    firebaseUser,\n    loading,\n    signIn,\n    signInAnonymously: signInAnonymouslyMethod,\n    signOut,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":2472},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = () => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n      console.log('WebSocket connected');\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n\n      // Attempt to reconnect\n      if (reconnectAttempts.current < maxReconnectAttempts) {\n        reconnectAttempts.current++;\n        console.log(`Attempting to reconnect... (${reconnectAttempts.current}/${maxReconnectAttempts})`);\n        setTimeout(() => {\n          connect();\n        }, 2000 * reconnectAttempts.current);\n      }\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":1942},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport default app;\n","size_bytes":526},"client/src/lib/kraken.ts":{"content":"// Client-side Kraken functionality (API calls go through backend)\nexport interface MarketData {\n  symbol: string;\n  price: string;\n  change24h: string;\n  volume: string;\n  high: string;\n  low: string;\n}\n\nexport async function getMarketTicker(symbol: string): Promise<MarketData> {\n  const response = await fetch(`/api/market/ticker/${symbol}`);\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch market data');\n  }\n\n  return response.json();\n}\n\nexport async function getAllTickers(): Promise<Record<string, MarketData>> {\n  const response = await fetch('/api/market/tickers');\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch market data');\n  }\n\n  return response.json();\n}\n\nexport interface TradeOrder {\n  symbol: string;\n  side: 'buy' | 'sell';\n  type: 'market' | 'limit' | 'stop-loss';\n  amount: string;\n  price?: string; // Optional for market orders\n  stopLoss?: string;\n  takeProfit?: string;\n}\n\nexport async function placeTrade(order: TradeOrder) {\n  const token = localStorage.getItem('firebase-token');\n  const response = await fetch('/api/trade', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(order)\n  });\n\n  if (!response.ok) {\n    throw new Error('Trade failed');\n  }\n\n  return response.json();\n}\n","size_bytes":1340},"client/src/lib/openai.ts":{"content":"// Client-side OpenAI functionality (API calls go through backend)\nexport interface AIAnalysis {\n  signal: 'buy' | 'sell' | 'hold';\n  confidence: number;\n  reasoning: string;\n  entryPrice: number;\n  targetPrice: number;\n  stopLoss: number;\n  riskReward: number;\n}\n\nexport async function requestAIAnalysis(symbol: string): Promise<AIAnalysis> {\n  const token = localStorage.getItem('firebase-token');\n  const response = await fetch('/api/ai/analyze', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({ symbol })\n  });\n\n  if (!response.ok) {\n    throw new Error('AI analysis failed');\n  }\n\n  const data = await response.json();\n  return data.analysis;\n}\n","size_bytes":755},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('firebase-token');\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('firebase-token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1776},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { TopNavigation } from '@/components/layout/top-navigation';\nimport { Sidebar } from '@/components/layout/sidebar';\nimport { StatsGrid } from '@/components/trading/stats-grid';\nimport { TradingChart } from '@/components/trading/trading-chart';\nimport { AISignals } from '@/components/trading/ai-signals';\nimport { QuickTrade } from '@/components/trading/quick-trade';\nimport { HoldingsTable } from '@/components/trading/holdings-table';\nimport { RecentTrades } from '@/components/trading/recent-trades';\nimport { MarketOverview } from '@/components/trading/market-overview';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\n\nexport default function Dashboard() {\n  const { getFormattedPrice, getFormattedChange } = useMarketPrices();\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"dashboard\">\n      <TopNavigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-[calc(100vh-73px)] overflow-y-auto\">\n            <div className=\"p-6 space-y-6\">\n              {/* Top Stats Row */}\n              <StatsGrid />\n\n              {/* Main Dashboard Grid */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Trading Chart */}\n                <TradingChart \n                  symbol=\"BTCUSD\"\n                  price={getFormattedPrice('BTCUSD')}\n                  change={getFormattedChange('BTCUSD')}\n                />\n\n                {/* AI Signals & Quick Trade */}\n                <div className=\"space-y-6\">\n                  <AISignals />\n                  <QuickTrade />\n                </div>\n              </div>\n\n              {/* Holdings & Recent Trades */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <HoldingsTable />\n                <RecentTrades />\n              </div>\n\n              {/* Market Overview */}\n              <MarketOverview />\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2059},"client/src/pages/login.tsx":{"content":"import { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Bot, CheckCircle, Loader2 } from 'lucide-react';\nimport { SiGoogle } from 'react-icons/si';\n\nexport default function Login() {\n  const { signIn, loading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"login-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Bot className=\"text-primary text-4xl mr-2 w-10 h-10\" />\n            <div>\n              <CardTitle className=\"text-2xl\">CryptoBot Pro</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                AI-Powered Trading Platform\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <div className=\"text-center space-y-2\">\n            <h2 className=\"text-lg font-semibold\">Welcome to the Future of Trading</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Experience AI-driven cryptocurrency trading with advanced risk management and real-time analytics.\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              <span>AI-powered trading signals</span>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              <span>Real-time market analysis</span>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              <span>Advanced risk management</span>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              <span>Demo & live trading modes</span>\n            </div>\n          </div>\n\n          <Button\n            onClick={signIn}\n            disabled={loading}\n            className=\"w-full bg-primary hover:bg-primary/90\"\n            size=\"lg\"\n            data-testid=\"google-sign-in\"\n          >\n            {loading ? (\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            ) : (\n              <SiGoogle className=\"w-4 h-4 mr-2\" />\n            )}\n            {loading ? 'Signing in...' : 'Continue with Google'}\n          </Button>\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              By signing in, you agree to our Terms of Service and Privacy Policy.\n              <br />\n              Start with demo mode to explore risk-free trading.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3346},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  Home, \n  Bot, \n  Wallet, \n  History, \n  Settings,\n  ArrowUp,\n  ArrowDown\n} from 'lucide-react';\n\nconst navigation = [\n  { name: 'Home', href: '/', icon: Home },\n  { name: 'Trading', href: '/ai-trading', icon: Bot },\n  { name: 'Portfolio', href: '/portfolio', icon: Wallet },\n  { name: 'Activity', href: '/trades', icon: History },\n  { name: 'Settings', href: '/settings', icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  const { data: portfolioData } = useQuery({\n    queryKey: ['/api/portfolio'],\n    enabled: true,\n  });\n\n  const { data: strategiesData } = useQuery({\n    queryKey: ['/api/strategies'],\n    enabled: true,\n  });\n\n  const portfolio = (portfolioData as any)?.portfolio;\n  const strategies = (strategiesData as any)?.strategies || [];\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border h-[calc(100vh-73px)] overflow-y-auto sidebar-scroll\" data-testid=\"sidebar\">\n      <div className=\"p-4\">\n        {/* Portfolio Summary */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">Portfolio Overview</h3>\n          <div className=\"space-y-3\">\n            <div className=\"bg-background rounded-lg p-3\">\n              <div className=\"text-xs text-muted-foreground\">Total Balance</div>\n              <div className=\"text-lg font-bold\" data-testid=\"total-balance\">\n                ${portfolio ? parseFloat(portfolio.totalBalance).toLocaleString() : '0.00'}\n              </div>\n              <div className=\"flex items-center text-xs\">\n                {portfolio && parseFloat(portfolio.pnl24h) >= 0 ? (\n                  <ArrowUp className=\"w-3 h-3 text-green-500 mr-1\" />\n                ) : (\n                  <ArrowDown className=\"w-3 h-3 text-red-500 mr-1\" />\n                )}\n                <span className={portfolio && parseFloat(portfolio.pnl24h) >= 0 ? \"text-green-500\" : \"text-red-500\"}>\n                  ${portfolio ? portfolio.pnl24h : '0.00'} ({portfolio ? portfolio.pnlPercentage24h : '0.00'}%)\n                </span>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"bg-background rounded-lg p-2\">\n                <div className=\"text-xs text-muted-foreground\">Available</div>\n                <div className=\"font-semibold text-sm\" data-testid=\"available-balance\">\n                  ${portfolio ? parseFloat(portfolio.availableBalance).toLocaleString() : '0.00'}\n                </div>\n              </div>\n              <div className=\"bg-background rounded-lg p-2\">\n                <div className=\"text-xs text-muted-foreground\">In Trading</div>\n                <div className=\"font-semibold text-sm\" data-testid=\"trading-balance\">\n                  ${portfolio ? parseFloat(portfolio.tradingBalance).toLocaleString() : '0.00'}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"space-y-1\">\n          {navigation.map((item) => {\n            const IconComponent = item.icon;\n            return (\n              <Link key={item.href} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors cursor-pointer\",\n                    location === item.href\n                      ? \"bg-primary/10 text-primary\"\n                      : \"text-muted-foreground hover:bg-accent hover:text-foreground\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  <IconComponent className=\"w-5 h-5\" />\n                  <span className={location === item.href ? \"font-medium\" : \"\"}>{item.name}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Active Strategies */}\n        <div className=\"mt-6\">\n          <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">Active Strategies</h3>\n          <div className=\"space-y-2\">\n            {strategies.length === 0 ? (\n              <div className=\"text-sm text-muted-foreground text-center py-4\">\n                No active strategies\n              </div>\n            ) : (\n              strategies.slice(0, 3).map((strategy: any) => (\n                <div key={strategy.id} className=\"bg-background rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm font-medium\" data-testid={`strategy-${strategy.id}`}>\n                      {strategy.name}\n                    </span>\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded\",\n                      strategy.isActive\n                        ? \"bg-success/20 text-success\"\n                        : \"bg-warning/20 text-warning\"\n                    )}>\n                      {strategy.isActive ? 'Active' : 'Paused'}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{strategy.symbol}</div>\n                  <div className=\"text-xs profit\">\n                    +{strategy.performance?.dailyReturn || '0.00'}% today\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5532},"client/src/components/layout/top-navigation.tsx":{"content":"import { useAuth } from '@/hooks/use-auth';\nimport { useTheme } from '@/contexts/theme-context';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\n\nexport function TopNavigation() {\n  const { user, signOut } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n\n  const getInitials = (name: string | null | undefined) => {\n    if (!name) return 'U';\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border px-4 py-3\" data-testid=\"top-navigation\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-robot text-primary text-2xl\"></i>\n            <h1 className=\"text-xl font-bold text-foreground\">CryptoBot Pro</h1>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-2\">\n            <Badge variant=\"secondary\" className=\"bg-success/20 text-success\">\n              {user?.isDemo ? 'DEMO MODE' : 'LIVE MODE'}\n            </Badge>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"mode-toggle\"\n            >\n              Switch to {user?.isDemo ? 'Live' : 'Demo'}\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Market Status */}\n          <div className=\"hidden lg:flex items-center space-x-2 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-success rounded-full animate-pulse-slow\"></div>\n              <span className=\"text-muted-foreground\">Market:</span>\n              <span className=\"text-success font-medium\">Open</span>\n            </div>\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              data-testid=\"theme-toggle\"\n            >\n              <i className={`fas ${theme === 'dark' ? 'fa-sun' : 'fa-moon'} text-muted-foreground`}></i>\n            </Button>\n            \n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"notifications\">\n              <i className=\"fas fa-bell text-muted-foreground\"></i>\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs\"></span>\n            </Button>\n            \n            <div className=\"flex items-center space-x-2 pl-3 border-l border-border\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-sm font-medium\">\n                  {getInitials(user?.displayName)}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"hidden md:block\">\n                <div className=\"text-sm font-medium\" data-testid=\"user-name\">\n                  {user?.displayName || 'User'}\n                </div>\n                <div className=\"text-xs text-muted-foreground\" data-testid=\"user-email\">\n                  {user?.email}\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={signOut}\n                data-testid=\"sign-out\"\n                className=\"ml-2\"\n              >\n                <i className=\"fas fa-sign-out-alt text-muted-foreground\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3906},"client/src/components/trading/ai-signals.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { cn } from '@/lib/utils';\n\nexport function AISignals() {\n  const { toast } = useToast();\n  \n  // Query for active signals only\n  const { data: signalsData } = useQuery({\n    queryKey: ['/api/ai/signals'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Query for historical signals (active + inactive)\n  const { data: historicalData } = useQuery({\n    queryKey: ['/api/ai/signals?includeInactive=true&limit=20'],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  const signals = (signalsData as any)?.signals || [];\n  const historicalSignals = (historicalData as any)?.signals || [];\n  const currentSignal = signals[0]; // Most recent signal\n\n  const tradeMutation = useMutation({\n    mutationFn: async (tradeData: any) => {\n      const response = await apiRequest('POST', '/api/trade', tradeData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'AI Trade Executed',\n        description: `${currentSignal.signal.toUpperCase()} order placed for ${currentSignal.symbol}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trades'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Trade Failed',\n        description: 'Failed to execute AI trade recommendation',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const handleAutoTrade = async () => {\n    if (!currentSignal) return;\n\n    tradeMutation.mutate({\n      symbol: currentSignal.symbol,\n      side: currentSignal.signal === 'buy' ? 'buy' : 'sell',\n      type: 'market',\n      amount: '0.01', // Small test amount\n      price: currentSignal.entryPrice,\n      isAiGenerated: true\n    });\n  };\n\n  const getSignalColor = (signal: string) => {\n    switch (signal) {\n      case 'buy': return 'text-success bg-success/10 border-success/20';\n      case 'sell': return 'text-destructive bg-destructive/10 border-destructive/20';\n      case 'hold': return 'text-warning bg-warning/10 border-warning/20';\n      default: return 'text-muted-foreground bg-muted/10 border-border';\n    }\n  };\n\n  const renderSignalCard = (signal: any, showActions: boolean = false, index?: number) => (\n    <div key={signal.id || index} className={cn(\"rounded-lg p-4 border\", getSignalColor(signal.signal))} data-testid={`signal-card-${signal.id || index}`}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"font-medium uppercase text-sm\" data-testid={`signal-action-${signal.id || index}`}>\n            {signal.signal === 'buy' ? 'STRONG BUY' : \n             signal.signal === 'sell' ? 'STRONG SELL' : 'HOLD'}\n          </span>\n          <span className=\"text-xs font-medium\">{signal.symbol}</span>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-xs text-muted-foreground\" data-testid={`signal-confidence-${signal.id || index}`}>\n            {signal.confidence}% confidence\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {new Date(signal.createdAt).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n      <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`signal-reasoning-${signal.id || index}`}>\n        {signal.reasoning || 'AI analysis completed'}\n      </p>\n      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n        <div>\n          <span className=\"text-muted-foreground\">Entry: </span>\n          <span className=\"font-medium\" data-testid={`signal-entry-${signal.id || index}`}>\n            ${parseFloat(signal.entryPrice || '0').toFixed(2)}\n          </span>\n        </div>\n        <div>\n          <span className=\"text-muted-foreground\">Target: </span>\n          <span className=\"font-medium\" data-testid={`signal-target-${signal.id || index}`}>\n            ${parseFloat(signal.targetPrice || '0').toFixed(2)}\n          </span>\n        </div>\n        <div>\n          <span className=\"text-muted-foreground\">Stop Loss: </span>\n          <span className=\"font-medium\" data-testid={`signal-stop-loss-${signal.id || index}`}>\n            ${parseFloat(signal.stopLoss || '0').toFixed(2)}\n          </span>\n        </div>\n        <div>\n          <span className=\"text-muted-foreground\">Risk/Reward: </span>\n          <span className=\"font-medium\" data-testid={`signal-risk-reward-${signal.id || index}`}>\n            1:{parseFloat(signal.riskReward || '0').toFixed(1)}\n          </span>\n        </div>\n      </div>\n      {showActions && (\n        <div className=\"grid grid-cols-2 gap-3 mt-4\">\n          <Button\n            className=\"bg-success hover:bg-success/90 text-white\"\n            onClick={handleAutoTrade}\n            disabled={signal.signal === 'hold' || tradeMutation.isPending}\n            data-testid=\"auto-execute-button\"\n          >\n            Auto Execute\n          </Button>\n          <Button variant=\"secondary\" data-testid=\"review-signal-button\">\n            Review Signal\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <Card data-testid=\"ai-signals\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">AI Trading Signals</h3>\n          <Badge variant=\"secondary\" className=\"bg-success/20 text-success\">\n            {signals.length} ACTIVE\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <Tabs defaultValue=\"current\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"current\" data-testid=\"tab-current\">Current</TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">History</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"current\" className=\"space-y-4\" data-testid=\"current-signals\">\n            {!currentSignal ? (\n              <div className=\"text-center py-8\">\n                <i className=\"fas fa-brain text-4xl text-muted-foreground mb-2\"></i>\n                <p className=\"text-muted-foreground\">No active signals</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  AI analysis will appear here\n                </p>\n              </div>\n            ) : (\n              renderSignalCard(currentSignal, true)\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"history\" className=\"space-y-4\" data-testid=\"historical-signals\">\n            {historicalSignals.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <i className=\"fas fa-history text-4xl text-muted-foreground mb-2\"></i>\n                <p className=\"text-muted-foreground\">No signal history</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Past AI signals will appear here\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {historicalSignals.map((signal: any, index: number) => renderSignalCard(signal, false, index))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7639},"client/src/components/trading/holdings-table.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\nimport { calculateHoldingPnL, formatPnL, formatPnLPercentage, getPnLClass } from '@/lib/pnl-calculator';\n\nexport function HoldingsTable() {\n  const { data: portfolioData } = useQuery({\n    queryKey: ['/api/portfolio'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n  const { getPrice } = useMarketPrices();\n\n  const holdings = (portfolioData as any)?.holdings || [];\n\n  const getCryptoIcon = (symbol: string) => {\n    const icons: Record<string, { icon: string; color: string }> = {\n      'BTC': { icon: 'fab fa-bitcoin', color: 'bg-orange-500' },\n      'ETH': { icon: 'fab fa-ethereum', color: 'bg-blue-500' },\n      'ADA': { icon: 'text-white text-xs font-bold', color: 'bg-green-500' },\n    };\n    \n    return icons[symbol.replace('USD', '')] || { icon: 'fas fa-coins', color: 'bg-gray-500' };\n  };\n\n  return (\n    <Card data-testid=\"holdings-table\">\n      <CardHeader>\n        <h3 className=\"font-semibold\">Current Holdings</h3>\n      </CardHeader>\n      <CardContent>\n        {holdings.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-wallet text-4xl text-muted-foreground mb-2\"></i>\n            <p className=\"text-muted-foreground\">No holdings yet</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Start trading to see your positions\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {holdings.map((holding: any) => {\n              const cryptoInfo = getCryptoIcon(holding.symbol);\n              const currentPrice = getPrice(holding.symbol);\n              const pnl = calculateHoldingPnL(holding, currentPrice);\n              \n              return (\n                <div key={holding.id} className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={cn(\"w-8 h-8 rounded-full flex items-center justify-center\", cryptoInfo.color)}>\n                      {holding.symbol.replace('USD', '') === 'ADA' ? (\n                        <span className=\"text-white text-xs font-bold\">ADA</span>\n                      ) : (\n                        <i className={cn(cryptoInfo.icon, \"text-white text-sm\")}></i>\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"font-medium\" data-testid={`holding-symbol-${holding.symbol}`}>\n                        {holding.symbol.replace('USD', '')}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid={`holding-amount-${holding.symbol}`}>\n                        {parseFloat(holding.amount).toFixed(4)}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\" data-testid={`holding-value-${holding.symbol}`}>\n                      ${(parseFloat(holding.amount) * currentPrice).toLocaleString()}\n                    </div>\n                    <div className={cn(\"text-sm\", getPnLClass(pnl))} data-testid={`holding-pnl-${holding.symbol}`}>\n                      {formatPnL(pnl)} ({formatPnLPercentage(pnl)})\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3639},"client/src/components/trading/market-overview.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\n\nconst MARKET_SYMBOLS = ['BTCUSD', 'ETHUSD', 'ADAUSD'];\n\nexport function MarketOverview() {\n  const { marketData } = useMarketPrices();\n\n  const { data: signalsData } = useQuery({\n    queryKey: ['/api/ai/signals'],\n    refetchInterval: 30000,\n  });\n\n  const signals = (signalsData as any)?.signals || [];\n\n  const getSignalForSymbol = (symbol: string) => {\n    const signal = signals.find((s: any) => s.symbol === symbol);\n    return signal?.signal || 'hold';\n  };\n\n  const getSignalBadge = (signal: string) => {\n    switch (signal) {\n      case 'buy':\n        return <Badge className=\"bg-success/20 text-success\">BUY</Badge>;\n      case 'sell':\n        return <Badge className=\"bg-destructive/20 text-destructive\">SELL</Badge>;\n      case 'hold':\n        return <Badge className=\"bg-warning/20 text-warning\">HOLD</Badge>;\n      default:\n        return <Badge variant=\"secondary\">-</Badge>;\n    }\n  };\n\n  const getCryptoInfo = (symbol: string) => {\n    const info: Record<string, { name: string; icon: string; color: string }> = {\n      'BTCUSD': { name: 'Bitcoin', icon: 'fab fa-bitcoin', color: 'bg-orange-500' },\n      'ETHUSD': { name: 'Ethereum', icon: 'fab fa-ethereum', color: 'bg-blue-500' },\n      'ADAUSD': { name: 'Cardano', icon: 'text-white text-xs font-bold', color: 'bg-green-500' },\n    };\n    \n    return info[symbol] || { name: symbol, icon: 'fas fa-coins', color: 'bg-gray-500' };\n  };\n\n  return (\n    <Card data-testid=\"market-overview\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Market Overview</h3>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Live prices via WebSocket</span>\n            <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/50\">\n              <tr className=\"text-left\">\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">Asset</th>\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">Price</th>\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">24h Change</th>\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">Volume</th>\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">AI Signal</th>\n                <th className=\"p-4 text-sm font-medium text-muted-foreground\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {MARKET_SYMBOLS.map((symbol) => {\n                const ticker = marketData[symbol];\n                const cryptoInfo = getCryptoInfo(symbol);\n                const signal = getSignalForSymbol(symbol);\n                \n                if (!ticker) {\n                  return (\n                    <tr key={symbol} className=\"border-b border-border\">\n                      <td className=\"p-4\" colSpan={6}>\n                        <div className=\"text-center text-muted-foreground\">Loading {symbol}...</div>\n                      </td>\n                    </tr>\n                  );\n                }\n\n                const price = ticker.price;\n                const change = ticker.changePercent;\n                const isPositive = !change.startsWith('-');\n                const volume = (parseFloat(ticker.volume) / 1000000).toFixed(1);\n\n                return (\n                  <tr key={symbol} className=\"border-b border-border hover:bg-muted/20 transition-colors\">\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={cn(\"w-8 h-8 rounded-full flex items-center justify-center\", cryptoInfo.color)}>\n                          {symbol === 'ADAUSD' ? (\n                            <span className=\"text-white text-xs font-bold\">ADA</span>\n                          ) : (\n                            <i className={cn(cryptoInfo.icon, \"text-white text-sm\")}></i>\n                          )}\n                        </div>\n                        <div>\n                          <div className=\"font-medium\" data-testid={`market-name-${symbol}`}>\n                            {cryptoInfo.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {symbol.replace('USD', '')}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      <div className=\"font-medium\" data-testid={`market-price-${symbol}`}>\n                        ${parseFloat(price).toLocaleString()}\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      <div className={cn(isPositive ? \"profit\" : \"loss\")} data-testid={`market-change-${symbol}`}>\n                        {isPositive ? '+' : ''}{change}%\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      <div className=\"text-sm\" data-testid={`market-volume-${symbol}`}>\n                        ${volume}M\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      {getSignalBadge(signal)}\n                    </td>\n                    <td className=\"p-4\">\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-primary hover:bg-primary/90\"\n                        data-testid={`trade-${symbol}`}\n                      >\n                        Trade\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6315},"client/src/components/trading/quick-trade.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { placeTrade } from '@/lib/kraken';\nimport { queryClient } from '@/lib/queryClient';\n\nconst tradeSchema = z.object({\n  symbol: z.string().min(1, 'Symbol is required'),\n  side: z.enum(['buy', 'sell']),\n  type: z.enum(['market', 'limit', 'stop-loss']),\n  amount: z.string().refine((val) => !isNaN(Number(val)) && Number(val) > 0, 'Invalid amount'),\n  price: z.string().optional(),\n  stopLoss: z.string().optional(),\n  takeProfit: z.string().optional(),\n}).refine((data) => {\n  // Price is required only for limit and stop-loss orders\n  if (data.type !== 'market' && (!data.price || isNaN(Number(data.price)) || Number(data.price) <= 0)) {\n    return false;\n  }\n  return true;\n}, {\n  message: 'Price is required for limit and stop-loss orders',\n  path: ['price']\n});\n\ntype TradeFormData = z.infer<typeof tradeSchema>;\n\nexport function QuickTrade() {\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\n  const { toast } = useToast();\n\n  const form = useForm<TradeFormData>({\n    resolver: zodResolver(tradeSchema),\n    defaultValues: {\n      symbol: 'BTCUSD',\n      side: 'buy',\n      type: 'market',\n      amount: '',\n      price: '',\n      stopLoss: '',\n      takeProfit: '',\n    },\n  });\n\n  const onSubmit = async (data: TradeFormData) => {\n    try {\n      await placeTrade({\n        ...data,\n        side: side,\n      });\n\n      toast({\n        title: 'Order Placed',\n        description: `${side.toUpperCase()} order for ${data.amount} ${data.symbol}`,\n      });\n\n      // Refresh related queries\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trades'] });\n\n      form.reset();\n    } catch (error) {\n      toast({\n        title: 'Trade Failed',\n        description: error instanceof Error ? error.message : 'Unknown error occurred',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <Card data-testid=\"quick-trade\">\n      <CardHeader>\n        <h3 className=\"font-semibold\">Quick Trade</h3>\n      </CardHeader>\n      \n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Button\n              type=\"button\"\n              variant={side === 'buy' ? 'default' : 'secondary'}\n              onClick={() => setSide('buy')}\n              className={side === 'buy' ? 'bg-success hover:bg-success/90 text-white' : ''}\n              data-testid=\"buy-button\"\n            >\n              BUY\n            </Button>\n            <Button\n              type=\"button\"\n              variant={side === 'sell' ? 'default' : 'secondary'}\n              onClick={() => setSide('sell')}\n              className={side === 'sell' ? 'bg-destructive hover:bg-destructive/90 text-white' : ''}\n              data-testid=\"sell-button\"\n            >\n              SELL\n            </Button>\n          </div>\n\n          <div>\n            <Label htmlFor=\"symbol\" className=\"text-sm text-muted-foreground\">Symbol</Label>\n            <Select \n              value={form.watch('symbol')} \n              onValueChange={(value) => form.setValue('symbol', value)}\n            >\n              <SelectTrigger data-testid=\"symbol-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"BTCUSD\">BTC/USD</SelectItem>\n                <SelectItem value=\"ETHUSD\">ETH/USD</SelectItem>\n                <SelectItem value=\"ADAUSD\">ADA/USD</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"amount\" className=\"text-sm text-muted-foreground\">Amount (USD)</Label>\n            <Input\n              id=\"amount\"\n              type=\"number\"\n              step=\"0.01\"\n              placeholder=\"1000.00\"\n              {...form.register('amount')}\n              data-testid=\"amount-input\"\n            />\n            {form.formState.errors.amount && (\n              <p className=\"text-xs text-destructive mt-1\">{form.formState.errors.amount.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"type\" className=\"text-sm text-muted-foreground\">Order Type</Label>\n            <Select \n              value={form.watch('type')} \n              onValueChange={(value) => form.setValue('type', value as any)}\n            >\n              <SelectTrigger data-testid=\"order-type-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"market\">Market</SelectItem>\n                <SelectItem value=\"limit\">Limit</SelectItem>\n                <SelectItem value=\"stop-loss\">Stop Loss</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {form.watch('type') !== 'market' && (\n            <div>\n              <Label htmlFor=\"price\" className=\"text-sm text-muted-foreground\">Price</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"43000.00\"\n                {...form.register('price')}\n                data-testid=\"price-input\"\n              />\n              {form.formState.errors.price && (\n                <p className=\"text-xs text-destructive mt-1\">{form.formState.errors.price.message}</p>\n              )}\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"stopLoss\" className=\"text-sm text-muted-foreground\">Stop Loss %</Label>\n              <Input\n                id=\"stopLoss\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"5\"\n                {...form.register('stopLoss')}\n                data-testid=\"stop-loss-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"takeProfit\" className=\"text-sm text-muted-foreground\">Take Profit %</Label>\n              <Input\n                id=\"takeProfit\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"10\"\n                {...form.register('takeProfit')}\n                data-testid=\"take-profit-input\"\n              />\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary hover:bg-primary/90\"\n            disabled={form.formState.isSubmitting}\n            data-testid=\"place-order-button\"\n          >\n            {form.formState.isSubmitting ? 'Placing Order...' : 'Place Order'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7139},"client/src/components/trading/recent-trades.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\nimport { calculateTradePnL, formatPnL, formatPnLPercentage, getPnLClass } from '@/lib/pnl-calculator';\n\nexport function RecentTrades() {\n  const { data: tradesData } = useQuery({\n    queryKey: ['/api/trades'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n  const { getPrice } = useMarketPrices();\n\n  const trades = (tradesData as any)?.trades || [];\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) return `${diffInSeconds}s ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n    return `${Math.floor(diffInSeconds / 86400)}d ago`;\n  };\n\n  return (\n    <Card data-testid=\"recent-trades\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Recent Trades</h3>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"view-all-trades\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {trades.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-history text-4xl text-muted-foreground mb-2\"></i>\n            <p className=\"text-muted-foreground\">No trades yet</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Your trading history will appear here\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {trades.slice(0, 5).map((trade: any) => {\n              const isBuy = trade.side === 'buy';\n              const status = trade.status;\n              const currentPrice = getPrice(trade.symbol);\n              const pnl = calculateTradePnL(trade, currentPrice);\n              \n              return (\n                <div key={trade.id} className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={cn(\n                      \"w-2 h-2 rounded-full\",\n                      status === 'filled' ? (isBuy ? 'bg-success' : 'bg-destructive') : 'bg-warning'\n                    )}></div>\n                    <div>\n                      <div className=\"font-medium text-sm\" data-testid={`trade-action-${trade.id}`}>\n                        {trade.side.toUpperCase()} {trade.symbol.replace('USD', '')}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\" data-testid={`trade-time-${trade.id}`}>\n                        {formatTimeAgo(trade.createdAt)}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-sm\" data-testid={`trade-amount-${trade.id}`}>\n                      {parseFloat(trade.amount).toFixed(4)} {trade.symbol.replace('USD', '')}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\" data-testid={`trade-price-${trade.id}`}>\n                      ${parseFloat(trade.price).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={cn(\"text-sm\", getPnLClass(pnl))} data-testid={`trade-pnl-${trade.id}`}>\n                      {formatPnL(pnl)}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {formatPnLPercentage(pnl)}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {trade.isAiGenerated ? 'AI' : 'Manual'}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4274},"client/src/components/trading/stats-grid.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\n\nexport function StatsGrid() {\n  const { data: portfolioData } = useQuery({\n    queryKey: ['/api/portfolio'],\n    refetchInterval: 30000,\n  });\n\n  const { data: tradesData } = useQuery({\n    queryKey: ['/api/trades'],\n    refetchInterval: 30000,\n  });\n\n  const { data: signalsData } = useQuery({\n    queryKey: ['/api/ai/signals'],\n    refetchInterval: 30000,\n  });\n\n  const { data: strategiesData } = useQuery({\n    queryKey: ['/api/strategies'],\n  });\n\n  const portfolio = (portfolioData as any)?.portfolio;\n  const trades = (tradesData as any)?.trades || [];\n  const signals = (signalsData as any)?.signals || [];\n  const strategies = (strategiesData as any)?.strategies || [];\n\n  // Calculate stats\n  const totalTrades = trades.length;\n  const successfulTrades = trades.filter((t: any) => t.status === 'filled').length;\n  const successRate = totalTrades > 0 ? ((successfulTrades / totalTrades) * 100).toFixed(0) : '0';\n  \n  const activeSignal = signals.find((s: any) => s.isActive);\n  const aiConfidence = activeSignal ? activeSignal.confidence : 0;\n  \n  const activeStrategies = strategies.filter((s: any) => s.isActive);\n  const activePositions = activeStrategies.length;\n\n  const stats = [\n    {\n      title: '24h P&L',\n      value: portfolio ? `$${parseFloat(portfolio.pnl24h).toLocaleString()}` : '$0.00',\n      change: portfolio ? `${parseFloat(portfolio.pnlPercentage24h).toFixed(2)}%` : '0.00%',\n      icon: 'fas fa-trending-up',\n      color: 'success',\n      testId: 'stat-pnl-24h'\n    },\n    {\n      title: 'Total Trades',\n      value: totalTrades.toString(),\n      change: `${successRate}% success rate`,\n      icon: 'fas fa-exchange-alt',\n      color: 'primary',\n      testId: 'stat-total-trades'\n    },\n    {\n      title: 'AI Confidence',\n      value: `${aiConfidence}%`,\n      change: aiConfidence > 70 ? 'High' : aiConfidence > 40 ? 'Medium' : 'Low',\n      icon: 'fas fa-brain',\n      color: 'accent',\n      testId: 'stat-ai-confidence'\n    },\n    {\n      title: 'Active Positions',\n      value: activePositions.toString(),\n      change: portfolio ? `$${parseFloat(portfolio.tradingBalance).toLocaleString()} invested` : '$0 invested',\n      icon: 'fas fa-coins',\n      color: 'warning',\n      testId: 'stat-active-positions'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\" data-testid=\"stats-grid\">\n      {stats.map((stat) => (\n        <Card key={stat.testId}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                <p className=\"text-2xl font-bold\" data-testid={stat.testId}>\n                  {stat.value}\n                </p>\n                <p className={`text-sm ${stat.color === 'success' ? 'profit' : 'text-muted-foreground'}`}>\n                  {stat.change}\n                </p>\n              </div>\n              <div className={`p-3 rounded-full bg-${stat.color}/20`}>\n                <i className={`${stat.icon} text-${stat.color}`}></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3299},"client/src/components/trading/trading-chart.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  ComposedChart, \n  Line as RechartsLine,\n  Bar,\n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip as RechartsTooltip, \n  ResponsiveContainer \n} from 'recharts';\n\ninterface TradingChartProps {\n  symbol: string;\n  price: string;\n  change: string;\n}\n\nexport function TradingChart({ symbol, price, change }: TradingChartProps) {\n  const [timeframe, setTimeframe] = useState('1D');\n  const [indicators, setIndicators] = useState<string[]>(['RSI']);\n  \n  // Map timeframe to Kraken interval (in minutes)\n  const getInterval = () => {\n    switch (timeframe) {\n      case '1H': return '5'; // 5 minute candles\n      case '4H': return '15'; // 15 minute candles  \n      case '1D': return '60'; // 1 hour candles\n      case '1W': return '240'; // 4 hour candles\n      default: return '60';\n    }\n  };\n\n  // Fetch real OHLC data from Kraken\n  const { data: ohlcData, isLoading } = useQuery({\n    queryKey: ['/api/market/ohlc', symbol, timeframe],\n    queryFn: async () => {\n      const interval = getInterval();\n      const response = await fetch(`/api/market/ohlc/${symbol}?interval=${interval}`);\n      if (!response.ok) throw new Error('Failed to fetch OHLC data');\n      return response.json();\n    },\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  // Format OHLC data for candlestick chart\n  const candleData = ohlcData?.data?.map((candle: any) => ({\n    time: new Date(candle.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    open: candle.open,\n    high: candle.high,\n    low: candle.low,\n    close: candle.close,\n    volume: candle.volume,\n    // Candle color: green if close > open, red otherwise\n    fill: candle.close >= candle.open ? '#22c55e' : '#ef4444',\n    // Candle body (for rendering)\n    candleBody: [candle.open, candle.close],\n    // Wick range\n    wickRange: [candle.low, candle.high]\n  })) || [];\n\n  const toggleIndicator = (indicator: string) => {\n    setIndicators(prev =>\n      prev.includes(indicator)\n        ? prev.filter(i => i !== indicator)\n        : [...prev, indicator]\n    );\n  };\n\n  const isPositive = !change.startsWith('-');\n\n  // Custom candlestick shape renderer for Recharts\n  const renderCandleStick = (props: any) => {\n    const { x, y, width, height, payload } = props;\n    if (!payload || !payload.open || !payload.close) return <g />;\n    \n    const { open, high, low, close } = payload;\n    const isUp = close >= open;\n    const color = isUp ? '#22c55e' : '#ef4444';\n    \n    // Calculate vertical positions\n    const maxPrice = Math.max(open, close);\n    const minPrice = Math.min(open, close);\n    const priceRange = high - low;\n    \n    if (priceRange === 0) return <g />; // Avoid division by zero\n    \n    // Calculate scaled positions\n    const bodyTop = y;\n    const bodyHeight = Math.abs(height) || 1;\n    const wickTop = bodyTop - ((high - maxPrice) / priceRange) * bodyHeight;\n    const wickBottom = bodyTop + bodyHeight + ((minPrice - low) / priceRange) * bodyHeight;\n    const centerX = x + width / 2;\n    \n    return (\n      <g>\n        {/* Upper and lower wick */}\n        <line\n          x1={centerX}\n          y1={wickTop}\n          x2={centerX}\n          y2={wickBottom}\n          stroke={color}\n          strokeWidth={1.5}\n        />\n        {/* Candle body */}\n        <rect\n          x={x + 1}\n          y={bodyTop}\n          width={Math.max(width - 2, 1)}\n          height={bodyHeight}\n          fill={color}\n          stroke={color}\n          strokeWidth={1}\n        />\n      </g>\n    );\n  };\n\n  return (\n    <Card className=\"lg:col-span-2\" data-testid=\"trading-chart\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-lg font-semibold\" data-testid=\"chart-symbol\">{symbol.replace('USD', '/USD')}</h2>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold\" data-testid=\"chart-price\">{price}</span>\n              <span className={`text-sm ${isPositive ? 'profit' : 'loss'}`} data-testid=\"chart-change\">\n                {change}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Select value={timeframe} onValueChange={setTimeframe}>\n              <SelectTrigger className=\"w-20\" data-testid=\"timeframe-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"1H\">1H</SelectItem>\n                <SelectItem value=\"4H\">4H</SelectItem>\n                <SelectItem value=\"1D\">1D</SelectItem>\n                <SelectItem value=\"1W\">1W</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"fullscreen-chart\">\n              <i className=\"fas fa-expand-arrows-alt text-muted-foreground\"></i>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"h-96 chart-container rounded-lg\" data-testid=\"chart-container\">\n          {isLoading ? (\n            <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n              Loading candlestick data...\n            </div>\n          ) : candleData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <ComposedChart data={candleData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(55, 65, 81, 0.3)\" />\n                <XAxis \n                  dataKey=\"time\" \n                  stroke=\"#9ca3af\"\n                  tick={{ fill: '#9ca3af', fontSize: 12 }}\n                  interval=\"preserveStartEnd\"\n                />\n                <YAxis \n                  domain={['dataMin - 50', 'dataMax + 50']}\n                  orientation=\"right\"\n                  stroke=\"#9ca3af\"\n                  tick={{ fill: '#9ca3af', fontSize: 12 }}\n                  tickFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n                <RechartsTooltip\n                  contentStyle={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.9)', \n                    border: '1px solid #374151',\n                    borderRadius: '4px',\n                    color: '#fff'\n                  }}\n                  formatter={(value: any, name: string) => {\n                    if (name === 'volume') return [value.toLocaleString(), 'Volume'];\n                    return [`$${parseFloat(value).toLocaleString()}`, name.toUpperCase()];\n                  }}\n                />\n                <Bar \n                  dataKey=\"close\" \n                  fill=\"#8884d8\"\n                  shape={renderCandleStick}\n                  isAnimationActive={false}\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n              No candlestick data available\n            </div>\n          )}\n        </div>\n\n        {/* Chart Controls */}\n        <div className=\"mt-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Indicators:</span>\n            {['RSI', 'MACD', 'MA(20)'].map((indicator) => (\n              <Button\n                key={indicator}\n                variant={indicators.includes(indicator) ? 'default' : 'secondary'}\n                size=\"sm\"\n                onClick={() => toggleIndicator(indicator)}\n                data-testid={`indicator-${indicator.toLowerCase()}`}\n              >\n                {indicator}\n              </Button>\n            ))}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs text-muted-foreground\">\n              {isLoading ? 'Loading...' : 'Real-time data from Kraken'}\n            </span>\n            <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8487},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport type { ReactNode } from 'react';\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  attribute?: 'class' | 'data-theme' | 'data-color-scheme';\n  defaultTheme?: string;\n  enableSystem?: boolean;\n  disableTransitionOnChange?: boolean;\n}\n\nexport function ThemeProvider({\n  children,\n  attribute = 'class',\n  ...props\n}: ThemeProviderProps) {\n  return <NextThemesProvider attribute={attribute} {...props}>{children}</NextThemesProvider>;\n}\n","size_bytes":515},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-market-prices.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useWebSocket } from './use-websocket';\n\ninterface MarketPrice {\n  symbol: string;\n  price: string;\n  change24h: string;\n  changePercent: string;\n  volume: string;\n  timestamp: number;\n}\n\nexport function useMarketPrices() {\n  const { lastMessage, isConnected } = useWebSocket();\n  const [prices, setPrices] = useState<{ [symbol: string]: number }>({});\n  const [marketData, setMarketData] = useState<{ [symbol: string]: MarketPrice }>({});\n\n  // Fetch initial market data once (WebSocket will provide updates)\n  const { data: tickersData } = useQuery({\n    queryKey: ['/api/market/tickers'],\n    refetchInterval: false, // Disable polling - WebSocket provides real-time updates\n    staleTime: Infinity, // Initial data never goes stale\n  });\n\n  // Update prices from API data\n  useEffect(() => {\n    if (tickersData && Array.isArray(tickersData)) {\n      const newPrices: { [symbol: string]: number } = {};\n      const newMarketData: { [symbol: string]: MarketPrice } = {};\n      tickersData.forEach((ticker: MarketPrice) => {\n        newPrices[ticker.symbol] = parseFloat(ticker.price);\n        newMarketData[ticker.symbol] = ticker;\n      });\n      setPrices(prev => ({ ...prev, ...newPrices }));\n      setMarketData(prev => ({ ...prev, ...newMarketData }));\n    }\n  }, [tickersData]);\n\n  // Handle WebSocket price updates with real Kraken data\n  useEffect(() => {\n    if (lastMessage?.type === 'price_update') {\n      console.log('[Market Prices] WebSocket update received:', Object.keys(lastMessage.data));\n      const data = lastMessage.data;\n      const newPrices: { [symbol: string]: number } = {};\n      const newMarketData: { [symbol: string]: MarketPrice } = {};\n      \n      // Process each symbol from WebSocket\n      Object.entries(data).forEach(([symbol, priceInfo]: [string, any]) => {\n        newPrices[symbol] = priceInfo.price;\n        newMarketData[symbol] = {\n          symbol,\n          price: priceInfo.price.toString(),\n          change24h: priceInfo.change24h.toString(),\n          changePercent: ((priceInfo.change24h / (priceInfo.price - priceInfo.change24h)) * 100).toFixed(2),\n          volume: priceInfo.volume.toString(),\n          timestamp: priceInfo.timestamp\n        };\n      });\n      \n      console.log('[Market Prices] Updated prices:', Object.keys(newPrices).map(s => `${s}: $${newPrices[s]}`));\n      setPrices(prev => ({ ...prev, ...newPrices }));\n      setMarketData(prev => ({ ...prev, ...newMarketData }));\n    }\n  }, [lastMessage]);\n\n  const getPrice = (symbol: string): number => {\n    return prices[symbol] || 0;\n  };\n\n  const getFormattedPrice = (symbol: string): string => {\n    const price = prices[symbol];\n    if (!price) return '$0.00';\n    return `$${price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const getFormattedChange = (symbol: string): string => {\n    const data = marketData[symbol];\n    if (!data) return '+0.00%';\n    \n    const changePercent = parseFloat(data.changePercent);\n    const sign = changePercent >= 0 ? '+' : '';\n    return `${sign}${changePercent.toFixed(2)}%`;\n  };\n\n  return {\n    prices,\n    marketData,\n    getPrice,\n    getFormattedPrice,\n    getFormattedChange\n  };\n}","size_bytes":3304},"client/src/lib/pnl-calculator.ts":{"content":"import type { Trade, Holding } from \"@shared/schema\";\n\nexport interface PnLCalculation {\n  amount: number;\n  percentage: number;\n  isProfit: boolean;\n}\n\n/**\n * Calculate P&L for a single trade based on current market price\n */\nexport function calculateTradePnL(\n  trade: Trade, \n  currentPrice: number\n): PnLCalculation {\n  const entryPrice = parseFloat(trade.price);\n  const amount = parseFloat(trade.amount);\n  \n  let pnlAmount: number;\n  \n  if (trade.side === 'buy') {\n    // For buy trades: P&L = (current_price - entry_price) * amount\n    pnlAmount = (currentPrice - entryPrice) * amount;\n  } else {\n    // For sell trades: P&L = (entry_price - current_price) * amount\n    pnlAmount = (entryPrice - currentPrice) * amount;\n  }\n  \n  const pnlPercentage = entryPrice > 0 ? (pnlAmount / (entryPrice * amount)) * 100 : 0;\n  \n  return {\n    amount: pnlAmount,\n    percentage: pnlPercentage,\n    isProfit: pnlAmount >= 0\n  };\n}\n\n/**\n * Calculate P&L for a holding based on current market price\n */\nexport function calculateHoldingPnL(\n  holding: Holding,\n  currentPrice: number\n): PnLCalculation {\n  const avgPrice = parseFloat(holding.averagePrice);\n  const amount = parseFloat(holding.amount);\n  \n  const pnlAmount = (currentPrice - avgPrice) * amount;\n  const pnlPercentage = avgPrice > 0 ? (pnlAmount / (avgPrice * amount)) * 100 : 0;\n  \n  return {\n    amount: pnlAmount,\n    percentage: pnlPercentage,\n    isProfit: pnlAmount >= 0\n  };\n}\n\n/**\n * Calculate total portfolio P&L from all holdings\n */\nexport function calculatePortfolioPnL(\n  holdings: Holding[],\n  marketPrices: { [symbol: string]: number }\n): PnLCalculation {\n  let totalPnL = 0;\n  let totalInvestment = 0;\n  \n  for (const holding of holdings) {\n    const currentPrice = marketPrices[holding.symbol] || parseFloat(holding.currentPrice);\n    const avgPrice = parseFloat(holding.averagePrice);\n    const amount = parseFloat(holding.amount);\n    \n    const holdingPnL = (currentPrice - avgPrice) * amount;\n    const investment = avgPrice * amount;\n    \n    totalPnL += holdingPnL;\n    totalInvestment += investment;\n  }\n  \n  const pnlPercentage = totalInvestment > 0 ? (totalPnL / totalInvestment) * 100 : 0;\n  \n  return {\n    amount: totalPnL,\n    percentage: pnlPercentage,\n    isProfit: totalPnL >= 0\n  };\n}\n\n/**\n * Format P&L amount for display\n */\nexport function formatPnL(pnl: PnLCalculation, showSign: boolean = true): string {\n  const sign = showSign ? (pnl.isProfit ? '+' : '-') : '';\n  return `${sign}$${Math.abs(pnl.amount).toFixed(2)}`;\n}\n\n/**\n * Format P&L percentage for display\n */\nexport function formatPnLPercentage(pnl: PnLCalculation, showSign: boolean = true): string {\n  const sign = showSign ? (pnl.isProfit ? '+' : '-') : '';\n  return `${sign}${Math.abs(pnl.percentage).toFixed(2)}%`;\n}\n\n/**\n * Get CSS class for P&L display based on profit/loss\n */\nexport function getPnLClass(pnl: PnLCalculation): string {\n  return pnl.isProfit ? 'profit' : 'loss';\n}","size_bytes":2943},"server/portfolio-service.ts":{"content":"import { storage } from './storage';\nimport type { Portfolio, Holding } from '@shared/schema';\n\n/**\n * Service for managing portfolio calculations and updates\n */\nexport class PortfolioService {\n  \n  /**\n   * Calculate and update portfolio P&L based on current market prices\n   */\n  async updatePortfolioPnL(userId: string, marketPrices: { [symbol: string]: number }): Promise<void> {\n    const portfolio = await storage.getPortfolio(userId);\n    if (!portfolio) return;\n\n    const holdings = await storage.getHoldings(portfolio.id);\n    \n    let totalPnL = 0;\n    let totalInvestment = 0;\n    let updatedTradingBalance = 0;\n\n    // Calculate P&L for each holding and update holding data\n    for (const holding of holdings) {\n      const currentPrice = marketPrices[holding.symbol] || parseFloat(holding.currentPrice);\n      const avgPrice = parseFloat(holding.averagePrice);\n      const amount = parseFloat(holding.amount);\n      \n      const holdingValue = currentPrice * amount;\n      const investment = avgPrice * amount;\n      const holdingPnL = (currentPrice - avgPrice) * amount;\n      const holdingPnLPercentage = avgPrice > 0 ? (holdingPnL / investment) * 100 : 0;\n      \n      // Update individual holding with current values\n      await storage.updateHolding(holding.id, {\n        currentPrice: currentPrice.toString(),\n        value: holdingValue.toFixed(8),\n        pnl: holdingPnL.toFixed(8),\n        pnlPercentage: holdingPnLPercentage.toFixed(4)\n      });\n      \n      totalPnL += holdingPnL;\n      totalInvestment += investment;\n      updatedTradingBalance += holdingValue;\n    }\n\n    // Calculate portfolio-level P&L percentage\n    const portfolioPnLPercentage = totalInvestment > 0 ? (totalPnL / totalInvestment) * 100 : 0;\n    \n    // Update portfolio with calculated values\n    const availableBalance = parseFloat(portfolio.availableBalance || '0');\n    await storage.updatePortfolio(portfolio.id, {\n      tradingBalance: updatedTradingBalance.toFixed(8),\n      totalBalance: (availableBalance + updatedTradingBalance).toFixed(8),\n      pnl24h: totalPnL.toFixed(8),\n      pnlPercentage24h: portfolioPnLPercentage.toFixed(4)\n    });\n  }\n\n  /**\n   * Update multiple users' portfolios with market prices\n   */\n  async updateAllPortfolios(marketPrices: { [symbol: string]: number }): Promise<void> {\n    // In a real application, you'd fetch all user IDs and update them\n    // For now, this is a placeholder for the batch update functionality\n    console.log('Batch portfolio update with market prices:', marketPrices);\n  }\n\n  /**\n   * Calculate portfolio metrics for display\n   */\n  async getPortfolioMetrics(userId: string): Promise<{\n    totalValue: number;\n    totalPnL: number;\n    totalPnLPercentage: number;\n    bestPerformer: { symbol: string; pnl: number } | null;\n    worstPerformer: { symbol: string; pnl: number } | null;\n  }> {\n    const portfolio = await storage.getPortfolio(userId);\n    if (!portfolio) {\n      return {\n        totalValue: 0,\n        totalPnL: 0,\n        totalPnLPercentage: 0,\n        bestPerformer: null,\n        worstPerformer: null\n      };\n    }\n\n    const holdings = await storage.getHoldings(portfolio.id);\n    \n    let totalValue = parseFloat(portfolio.availableBalance || '0');\n    let totalPnL = 0;\n    let totalInvestment = 0;\n    let bestPerformer: { symbol: string; pnl: number } | null = null;\n    let worstPerformer: { symbol: string; pnl: number } | null = null;\n\n    for (const holding of holdings) {\n      const holdingValue = parseFloat(holding.value || '0');\n      const holdingPnL = parseFloat(holding.pnl || '0');\n      \n      totalValue += holdingValue;\n      totalPnL += holdingPnL;\n      totalInvestment += parseFloat(holding.averagePrice || '0') * parseFloat(holding.amount || '0');\n      \n      if (!bestPerformer || holdingPnL > bestPerformer.pnl) {\n        bestPerformer = { symbol: holding.symbol, pnl: holdingPnL };\n      }\n      \n      if (!worstPerformer || holdingPnL < worstPerformer.pnl) {\n        worstPerformer = { symbol: holding.symbol, pnl: holdingPnL };\n      }\n    }\n\n    const totalPnLPercentage = totalInvestment > 0 ? (totalPnL / totalInvestment) * 100 : 0;\n\n    return {\n      totalValue,\n      totalPnL,\n      totalPnLPercentage,\n      bestPerformer,\n      worstPerformer\n    };\n  }\n}\n\nexport const portfolioService = new PortfolioService();","size_bytes":4340},"client/src/components/charts/equity-curve.tsx":{"content":"import { useRef, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\n\ninterface EquityCurveProps {\n  data: Array<{\n    timestamp: string;\n    equity: number;\n    drawdown?: number;\n  }>;\n  height?: number;\n  className?: string;\n  showDrawdown?: boolean;\n  title?: string;\n}\n\nexport function EquityCurve({\n  data = [],\n  height = 300,\n  className,\n  showDrawdown = true,\n  title = \"Portfolio Equity Curve\"\n}: EquityCurveProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n\n  // Calculate key metrics\n  const currentEquity = data[data.length - 1]?.equity || 0;\n  const initialEquity = data[0]?.equity || 0;\n  const totalReturn = currentEquity - initialEquity;\n  const totalReturnPercent = initialEquity > 0 ? (totalReturn / initialEquity) * 100 : 0;\n  \n  const maxDrawdown = data.reduce((max, point) => \n    Math.min(max, point.drawdown || 0), 0\n  );\n\n  useEffect(() => {\n    if (!chartRef.current || data.length === 0) return;\n\n    const canvas = chartRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * window.devicePixelRatio;\n    canvas.height = rect.height * window.devicePixelRatio;\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, rect.width, rect.height);\n\n    if (data.length < 2) return;\n\n    // Calculate bounds\n    const minEquity = Math.min(...data.map(d => d.equity));\n    const maxEquity = Math.max(...data.map(d => d.equity));\n    const padding = 40;\n    const chartWidth = rect.width - padding * 2;\n    const chartHeight = rect.height - padding * 2;\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(156, 163, 175, 0.2)';\n    ctx.lineWidth = 1;\n    \n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (chartHeight / 5) * i;\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(rect.width - padding, y);\n      ctx.stroke();\n    }\n\n    // Draw equity curve\n    ctx.strokeStyle = '#3b82f6';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n\n    data.forEach((point, index) => {\n      const x = padding + (chartWidth / (data.length - 1)) * index;\n      const y = padding + chartHeight - ((point.equity - minEquity) / (maxEquity - minEquity)) * chartHeight;\n      \n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n    \n    ctx.stroke();\n\n    // Fill area under curve\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.1)';\n    ctx.lineTo(rect.width - padding, padding + chartHeight);\n    ctx.lineTo(padding, padding + chartHeight);\n    ctx.closePath();\n    ctx.fill();\n\n    // Draw drawdown if enabled\n    if (showDrawdown) {\n      ctx.strokeStyle = '#ef4444';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n\n      data.forEach((point, index) => {\n        if (point.drawdown) {\n          const x = padding + (chartWidth / (data.length - 1)) * index;\n          const ddHeight = Math.abs(point.drawdown) / Math.abs(maxDrawdown) * 60;\n          const y = rect.height - padding - ddHeight;\n          \n          if (index === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n        }\n      });\n      \n      ctx.stroke();\n    }\n\n  }, [data, height, showDrawdown]);\n\n  return (\n    <Card className={cn('relative', className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-base font-medium\">{title}</CardTitle>\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              {totalReturn >= 0 ? (\n                <TrendingUp className=\"w-4 h-4 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-4 h-4 text-red-600\" />\n              )}\n              <span className={cn(\n                'font-medium',\n                totalReturn >= 0 ? 'text-green-600' : 'text-red-600'\n              )}>\n                {totalReturn >= 0 ? '+' : ''}${totalReturn.toFixed(2)} ({totalReturnPercent.toFixed(2)}%)\n              </span>\n            </div>\n            {showDrawdown && (\n              <div className=\"text-red-600\">\n                <span className=\"text-xs text-muted-foreground\">Max DD:</span>\n                <span className=\"font-medium ml-1\">{maxDrawdown.toFixed(2)}%</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"relative\" style={{ height }}>\n          <canvas\n            ref={chartRef}\n            className=\"absolute inset-0 w-full h-full\"\n            style={{ width: '100%', height: '100%' }}\n          />\n          \n          {data.length === 0 && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                <div className=\"text-lg font-medium mb-1\">No data available</div>\n                <div className=\"text-sm\">Start trading to see your equity curve</div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Legend */}\n        <div className=\"border-t bg-muted/30 p-3\">\n          <div className=\"flex items-center space-x-6 text-xs\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-0.5 bg-blue-500\"></div>\n              <span className=\"text-muted-foreground\">Portfolio Value</span>\n            </div>\n            {showDrawdown && (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-0.5 bg-red-500\"></div>\n                <span className=\"text-muted-foreground\">Drawdown</span>\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-muted-foreground\">Current:</span>\n              <span className=\"font-medium\">${currentEquity.toLocaleString()}</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6223},"client/src/components/charts/trading-chart.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { \n  TrendingUp, \n  TrendingDown, \n  BarChart3, \n  LineChart, \n  BarChart2,\n  Volume,\n  Settings,\n  Maximize,\n  Minimize\n} from 'lucide-react';\n\ninterface TradingChartProps {\n  symbol: string;\n  data?: any[];\n  timeframe?: '1m' | '5m' | '15m' | '1h' | '4h' | '1d' | '1w';\n  onTimeframeChange?: (timeframe: string) => void;\n  height?: number;\n  className?: string;\n  showVolume?: boolean;\n  showIndicators?: boolean;\n  isFullscreen?: boolean;\n  onToggleFullscreen?: () => void;\n}\n\nexport function TradingChart({\n  symbol,\n  data = [],\n  timeframe = '1h',\n  onTimeframeChange,\n  height = 400,\n  className,\n  showVolume = true,\n  showIndicators = true,\n  isFullscreen = false,\n  onToggleFullscreen\n}: TradingChartProps) {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const [chartType, setChartType] = useState<'candlestick' | 'line'>('candlestick');\n  const [currentPrice, setCurrentPrice] = useState(0);\n  const [priceChange, setPriceChange] = useState(0);\n  const [priceChangePercent, setPriceChangePercent] = useState(0);\n\n  const timeframes = [\n    { value: '1m', label: '1m' },\n    { value: '5m', label: '5m' },\n    { value: '15m', label: '15m' },\n    { value: '1h', label: '1H' },\n    { value: '4h', label: '4H' },\n    { value: '1d', label: '1D' },\n    { value: '1w', label: '1W' }\n  ];\n\n  // Mock price data for demonstration\n  useEffect(() => {\n    // Simulate real-time price updates\n    setCurrentPrice(42350.75);\n    setPriceChange(1250.30);\n    setPriceChangePercent(3.04);\n  }, [symbol]);\n\n  // Chart rendering would integrate with a library like Lightweight Charts\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    // This would be where you'd integrate with TradingView Lightweight Charts\n    // For now, we'll show a placeholder that looks professional\n    \n    return () => {\n      // Cleanup chart instance\n    };\n  }, [data, chartType, timeframe]);\n\n  return (\n    <Card className={cn(\n      'relative overflow-hidden',\n      isFullscreen && 'fixed inset-0 z-50 rounded-none',\n      className\n    )}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <CardTitle className=\"text-lg font-semibold\">\n              {symbol.replace('USD', '/USD')}\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold\">\n                ${currentPrice.toLocaleString()}\n              </span>\n              <Badge \n                variant={priceChange >= 0 ? 'default' : 'destructive'}\n                className=\"text-xs\"\n              >\n                {priceChange >= 0 ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                {priceChange >= 0 ? '+' : ''}{priceChange.toFixed(2)} ({priceChangePercent.toFixed(2)}%)\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Chart type selector */}\n            <div className=\"flex items-center border rounded-md\">\n              <Button\n                variant={chartType === 'candlestick' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"rounded-r-none border-r\"\n                onClick={() => setChartType('candlestick')}\n              >\n                <BarChart2 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={chartType === 'line' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"rounded-l-none\"\n                onClick={() => setChartType('line')}\n              >\n                <LineChart className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Timeframe selector */}\n            <div className=\"flex items-center border rounded-md\">\n              {timeframes.map((tf) => (\n                <Button\n                  key={tf.value}\n                  variant={timeframe === tf.value ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  className=\"border-none rounded-none text-xs px-3\"\n                  onClick={() => onTimeframeChange?.(tf.value)}\n                  data-testid={`timeframe-${tf.value}`}\n                >\n                  {tf.label}\n                </Button>\n              ))}\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"w-4 h-4\" />\n            </Button>\n\n            {onToggleFullscreen && (\n              <Button variant=\"outline\" size=\"sm\" onClick={onToggleFullscreen}>\n                {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        {/* Chart container */}\n        <div\n          ref={chartRef}\n          className=\"relative bg-background\"\n          style={{ height }}\n        >\n          {/* Professional chart placeholder */}\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-background to-muted/20\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-lg font-medium text-muted-foreground\">\n                Professional Trading Chart\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                TradingView Lightweight Charts integration placeholder\n              </p>\n              <div className=\"mt-4 flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n                <span>â€¢ Real-time data</span>\n                <span>â€¢ Technical indicators</span>\n                <span>â€¢ Drawing tools</span>\n                <span>â€¢ Volume analysis</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Crosshair info panel */}\n          <div className=\"absolute top-4 left-4 bg-card/90 backdrop-blur border rounded-lg p-3 text-xs\">\n            <div className=\"grid grid-cols-2 gap-x-4 gap-y-1\">\n              <span className=\"text-muted-foreground\">Open:</span>\n              <span className=\"font-medium\">41,100.25</span>\n              <span className=\"text-muted-foreground\">High:</span>\n              <span className=\"font-medium text-green-600\">42,580.90</span>\n              <span className=\"text-muted-foreground\">Low:</span>\n              <span className=\"font-medium text-red-600\">40,950.10</span>\n              <span className=\"text-muted-foreground\">Close:</span>\n              <span className=\"font-medium\">42,350.75</span>\n            </div>\n          </div>\n\n          {/* Volume indicator */}\n          {showVolume && (\n            <div className=\"absolute bottom-4 left-4 bg-card/90 backdrop-blur border rounded-lg p-2 text-xs\">\n              <div className=\"flex items-center space-x-2\">\n                <Volume className=\"w-4 h-4 text-blue-500\" />\n                <span className=\"text-muted-foreground\">Volume:</span>\n                <span className=\"font-medium\">1,234.56 BTC</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Indicators panel */}\n        {showIndicators && (\n          <div className=\"border-t bg-muted/30 p-3\">\n            <div className=\"flex items-center space-x-6 text-xs\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                <span className=\"text-muted-foreground\">MA(20):</span>\n                <span className=\"font-medium\">41,850.30</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <span className=\"text-muted-foreground\">MA(50):</span>\n                <span className=\"font-medium\">40,920.15</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                <span className=\"text-muted-foreground\">RSI:</span>\n                <span className=\"font-medium\">67.23</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-muted-foreground\">MACD:</span>\n                <span className=\"font-medium text-green-600\">+125.40</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8895},"client/src/components/ui/pro-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\nimport { TrendingUp, TrendingDown, Activity } from 'lucide-react';\n\ninterface ProCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  change?: number;\n  changeType?: 'percentage' | 'absolute';\n  trend?: 'up' | 'down' | 'neutral';\n  icon?: React.ReactNode;\n  className?: string;\n  children?: React.ReactNode;\n  variant?: 'default' | 'metric' | 'signal' | 'critical';\n}\n\nexport function ProCard({\n  title,\n  value,\n  subtitle,\n  change,\n  changeType = 'percentage',\n  trend,\n  icon,\n  className,\n  children,\n  variant = 'default'\n}: ProCardProps) {\n  const getTrendIcon = () => {\n    if (trend === 'up') return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    if (trend === 'down') return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n    return <Activity className=\"w-4 h-4 text-muted-foreground\" />;\n  };\n\n  const getChangeColor = () => {\n    if (change === undefined) return '';\n    if (change > 0) return 'text-green-600 dark:text-green-400';\n    if (change < 0) return 'text-red-600 dark:text-red-400';\n    return 'text-muted-foreground';\n  };\n\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'metric':\n        return 'bg-gradient-to-br from-card to-muted/20 border-primary/20';\n      case 'signal':\n        return 'bg-gradient-to-br from-blue-500/5 to-blue-500/10 border-blue-500/20';\n      case 'critical':\n        return 'bg-gradient-to-br from-red-500/5 to-red-500/10 border-red-500/20';\n      default:\n        return 'bg-card border-border';\n    }\n  };\n\n  return (\n    <Card className={cn(\n      'relative overflow-hidden transition-all duration-200 hover:shadow-lg dark:hover:shadow-primary/10',\n      getVariantStyles(),\n      className\n    )}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n          {icon}\n          {title}\n        </CardTitle>\n        {trend && getTrendIcon()}\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold tracking-tight text-foreground\">\n          {typeof value === 'number' ? value.toLocaleString() : value}\n        </div>\n        {(subtitle || change !== undefined) && (\n          <div className=\"flex items-center justify-between mt-1\">\n            {subtitle && (\n              <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n            )}\n            {change !== undefined && (\n              <p className={cn('text-xs font-medium', getChangeColor())}>\n                {change > 0 ? '+' : ''}{change}\n                {changeType === 'percentage' ? '%' : ''}\n              </p>\n            )}\n          </div>\n        )}\n        {children}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface MetricTileProps {\n  label: string;\n  value: string | number;\n  change?: number;\n  changeLabel?: string;\n  icon?: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg';\n  trend?: 'up' | 'down' | 'neutral';\n}\n\nexport function MetricTile({ \n  label, \n  value, \n  change, \n  changeLabel, \n  icon, \n  size = 'md',\n  trend \n}: MetricTileProps) {\n  const sizeClasses = {\n    sm: 'p-3',\n    md: 'p-4',\n    lg: 'p-6'\n  };\n\n  const valueSizes = {\n    sm: 'text-lg',\n    md: 'text-xl',\n    lg: 'text-2xl'\n  };\n\n  return (\n    <div className={cn(\n      'bg-card border border-border rounded-lg transition-all hover:shadow-md dark:hover:shadow-primary/5',\n      sizeClasses[size]\n    )}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n          {label}\n        </span>\n        {icon}\n      </div>\n      <div className={cn('font-bold text-foreground', valueSizes[size])}>\n        {typeof value === 'number' ? value.toLocaleString() : value}\n      </div>\n      {(change !== undefined || changeLabel) && (\n        <div className=\"flex items-center mt-1 text-xs\">\n          {change !== undefined && (\n            <span className={cn(\n              'font-medium',\n              change > 0 ? 'text-green-600 dark:text-green-400' :\n              change < 0 ? 'text-red-600 dark:text-red-400' :\n              'text-muted-foreground'\n            )}>\n              {change > 0 ? '+' : ''}{change}%\n            </span>\n          )}\n          {changeLabel && (\n            <span className=\"text-muted-foreground ml-1\">{changeLabel}</span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4556},"client/src/components/ui/pro-table.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { \n  ChevronUp, \n  ChevronDown, \n  Search, \n  Filter, \n  Download,\n  MoreHorizontal,\n  ArrowUpDown\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nexport interface ProTableColumn<T = any> {\n  key: string;\n  title: string;\n  sortable?: boolean;\n  width?: string;\n  render?: (value: any, row: T) => React.ReactNode;\n  className?: string;\n}\n\ninterface ProTableProps<T = any> {\n  data: T[];\n  columns: ProTableColumn<T>[];\n  loading?: boolean;\n  searchable?: boolean;\n  searchPlaceholder?: string;\n  exportable?: boolean;\n  onExport?: () => void;\n  pagination?: {\n    page: number;\n    pageSize: number;\n    total: number;\n    onPageChange: (page: number) => void;\n  };\n  actions?: (row: T) => React.ReactNode;\n  className?: string;\n  emptyState?: React.ReactNode;\n}\n\nexport function ProTable<T extends Record<string, any>>({\n  data,\n  columns,\n  loading = false,\n  searchable = false,\n  searchPlaceholder = \"Search...\",\n  exportable = false,\n  onExport,\n  pagination,\n  actions,\n  className,\n  emptyState\n}: ProTableProps<T>) {\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const filteredData = useMemo(() => {\n    if (!searchTerm) return data;\n    \n    return data.filter(row =>\n      Object.values(row).some(value =>\n        String(value).toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    );\n  }, [data, searchTerm]);\n\n  const sortedData = useMemo(() => {\n    if (!sortColumn) return filteredData;\n\n    return [...filteredData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (aValue === bValue) return 0;\n      \n      const comparison = aValue < bValue ? -1 : 1;\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  }, [filteredData, sortColumn, sortDirection]);\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  const getSortIcon = (column: string) => {\n    if (sortColumn !== column) {\n      return <ArrowUpDown className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ChevronUp className=\"w-4 h-4 text-primary\" />\n      : <ChevronDown className=\"w-4 h-4 text-primary\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {/* Loading toolbar */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-9 w-64 bg-muted animate-pulse rounded\" />\n            <div className=\"h-9 w-20 bg-muted animate-pulse rounded\" />\n          </div>\n          <div className=\"h-9 w-24 bg-muted animate-pulse rounded\" />\n        </div>\n        \n        {/* Loading table */}\n        <div className=\"border rounded-lg\">\n          <div className=\"p-4 space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex space-x-4\">\n                {columns.map((col, j) => (\n                  <div key={j} className=\"h-6 bg-muted animate-pulse rounded flex-1\" />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Toolbar */}\n      {(searchable || exportable) && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {searchable && (\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder={searchPlaceholder}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9 w-64\"\n                  data-testid=\"table-search\"\n                />\n              </div>\n            )}\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-1\" />\n              Filters\n            </Button>\n          </div>\n          \n          {exportable && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={onExport}\n              data-testid=\"export-button\"\n            >\n              <Download className=\"w-4 h-4 mr-1\" />\n              Export\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Table */}\n      <div className=\"border rounded-lg bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"border-border\">\n              {columns.map((column) => (\n                <TableHead \n                  key={column.key}\n                  className={cn(\n                    'text-muted-foreground font-medium',\n                    column.sortable && 'cursor-pointer hover:text-foreground',\n                    column.className\n                  )}\n                  style={{ width: column.width }}\n                  onClick={() => column.sortable && handleSort(column.key)}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{column.title}</span>\n                    {column.sortable && getSortIcon(column.key)}\n                  </div>\n                </TableHead>\n              ))}\n              {actions && (\n                <TableHead className=\"w-16\">\n                  <span className=\"sr-only\">Actions</span>\n                </TableHead>\n              )}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedData.length === 0 ? (\n              <TableRow>\n                <TableCell \n                  colSpan={columns.length + (actions ? 1 : 0)} \n                  className=\"text-center py-12\"\n                >\n                  {emptyState || (\n                    <div className=\"text-muted-foreground\">\n                      {searchTerm ? 'No results found' : 'No data available'}\n                    </div>\n                  )}\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedData.map((row, index) => (\n                <TableRow \n                  key={index} \n                  className=\"border-border hover:bg-muted/50 transition-colors\"\n                >\n                  {columns.map((column) => (\n                    <TableCell \n                      key={column.key} \n                      className={cn('py-3', column.className)}\n                    >\n                      {column.render \n                        ? column.render(row[column.key], row)\n                        : row[column.key]\n                      }\n                    </TableCell>\n                  ))}\n                  {actions && (\n                    <TableCell className=\"py-3\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          {actions(row)}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  )}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      {pagination && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((pagination.page - 1) * pagination.pageSize) + 1} to{' '}\n            {Math.min(pagination.page * pagination.pageSize, pagination.total)} of{' '}\n            {pagination.total} results\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => pagination.onPageChange(pagination.page - 1)}\n              disabled={pagination.page <= 1}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => pagination.onPageChange(pagination.page + 1)}\n              disabled={pagination.page * pagination.pageSize >= pagination.total}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9130},"client/src/pages/ai-trading.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ProCard, MetricTile } from '@/components/ui/pro-card';\nimport { TradingChart } from '@/components/charts/trading-chart';\nimport { TopNavigation } from '@/components/layout/top-navigation';\nimport { Sidebar } from '@/components/layout/sidebar';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\nimport { useState } from 'react';\nimport { \n  Brain, \n  TrendingUp, \n  TrendingDown, \n  Target, \n  Shield, \n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  Activity,\n  BarChart3,\n  Pause,\n  Play,\n  Settings\n} from 'lucide-react';\n\nexport default function AITrading() {\n  const { toast } = useToast();\n  const { getPrice } = useMarketPrices();\n  const [selectedSymbol, setSelectedSymbol] = useState('BTCUSD');\n  const [riskLevel, setRiskLevel] = useState([3]);\n  const [autoTrade, setAutoTrade] = useState(false);\n  const [maxPositionSize, setMaxPositionSize] = useState([10]);\n  const [dailyLossLimit, setDailyLossLimit] = useState([500]);\n  const [timeframe, setTimeframe] = useState('1h');\n\n  const { data: signalsData } = useQuery({\n    queryKey: ['/api/ai/signals'],\n    refetchInterval: 30000,\n  });\n\n  const { data: strategiesData } = useQuery({\n    queryKey: ['/api/strategies'],\n    refetchInterval: 60000,\n  });\n\n  const signals = (signalsData as any)?.signals || [];\n  const strategies = (strategiesData as any)?.strategies || [];\n\n  const generateSignalMutation = useMutation({\n    mutationFn: async (data: { symbol: string; timeframe: string; riskLevel: number }) => {\n      const response = await apiRequest('POST', '/api/ai/analyze', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'AI Analysis Complete',\n        description: 'New trading signal generated successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/signals'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Analysis Failed',\n        description: 'Failed to generate AI trading signal',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const executeSignalMutation = useMutation({\n    mutationFn: async (data: { signal: any }) => {\n      const { signal } = data;\n      \n      // Validate signal type before executing\n      const validSignals = ['buy', 'sell'];\n      if (!validSignals.includes(signal.signal?.toLowerCase())) {\n        throw new Error(`Invalid signal type: ${signal.signal}. Expected 'buy' or 'sell'.`);\n      }\n      \n      const response = await apiRequest('POST', '/api/trade', {\n        symbol: signal.symbol,\n        side: signal.signal.toLowerCase(), // Ensure lowercase 'buy' or 'sell'\n        type: 'market',\n        amount: '0.001', // Small amount for demo trades\n        price: signal.entryPrice,\n        isAiGenerated: true\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Trade execution failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Trade Executed',\n        description: `AI signal trade executed successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trades'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Trade Failed',\n        description: error.message || 'Failed to execute trade from signal',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const dismissSignalMutation = useMutation({\n    mutationFn: async (signalId: string) => {\n      const response = await apiRequest('PUT', `/api/ai/signals/${signalId}/dismiss`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Signal Dismissed',\n        description: 'Signal has been marked as inactive',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/signals'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Dismiss Failed',\n        description: 'Failed to dismiss signal',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const handleGenerateSignal = () => {\n    generateSignalMutation.mutate({\n      symbol: selectedSymbol,\n      timeframe: timeframe,\n      riskLevel: riskLevel[0]\n    });\n  };\n\n  const handleExecuteSignal = (signal: any) => {\n    executeSignalMutation.mutate({ signal });\n  };\n\n  const handleDismissSignal = (signalId: string) => {\n    dismissSignalMutation.mutate(signalId);\n  };\n\n  const currentPrice = getPrice(selectedSymbol);\n\n  // Calculate AI performance metrics\n  const aiAccuracy = signals.length > 0 ? \n    (signals.filter((s: any) => s.performance === 'profitable').length / signals.length) * 100 : 0;\n  const avgConfidence = signals.length > 0 ? \n    signals.reduce((sum: number, s: any) => sum + s.confidence, 0) / signals.length : 0;\n  const totalSignals = signals.length;\n  const activeStrategies = strategies.filter((s: any) => s.isActive).length;\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"ai-trading-page\">\n      <TopNavigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-[calc(100vh-73px)] overflow-y-auto\">\n            <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-foreground\" data-testid=\"page-title\">\n            AI Trading Terminal\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Professional-grade AI signals with institutional risk management\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge variant={autoTrade ? 'default' : 'secondary'} className=\"px-3 py-1\">\n            {autoTrade ? (\n              <>\n                <Activity className=\"w-3 h-3 mr-1\" />\n                Auto-Trading Active\n              </>\n            ) : (\n              <>\n                <Pause className=\"w-3 h-3 mr-1\" />\n                Manual Mode\n              </>\n            )}\n          </Badge>\n          <Button variant=\"outline\" size=\"sm\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            Trading Settings\n          </Button>\n        </div>\n      </div>\n\n      {/* AI Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <MetricTile\n          label=\"AI Accuracy\"\n          value={`${aiAccuracy.toFixed(1)}%`}\n          change={aiAccuracy > 70 ? 5.2 : -2.1}\n          icon={<Brain className=\"w-4 h-4 text-blue-500\" />}\n          trend={aiAccuracy > 70 ? 'up' : 'down'}\n        />\n        <MetricTile\n          label=\"Avg Confidence\"\n          value={`${avgConfidence.toFixed(0)}%`}\n          change={2.4}\n          icon={<Target className=\"w-4 h-4 text-green-500\" />}\n          trend=\"up\"\n        />\n        <MetricTile\n          label=\"Total Signals\"\n          value={totalSignals}\n          changeLabel=\"Today\"\n          icon={<Zap className=\"w-4 h-4 text-purple-500\" />}\n        />\n        <MetricTile\n          label=\"Active Strategies\"\n          value={activeStrategies}\n          changeLabel=\"Running\"\n          icon={<Activity className=\"w-4 h-4 text-orange-500\" />}\n        />\n      </div>\n\n      {/* Main Trading Interface */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Professional Trading Chart */}\n        <div className=\"xl:col-span-2\">\n          <TradingChart\n            symbol={selectedSymbol}\n            timeframe={timeframe as '1m' | '5m' | '15m' | '1h' | '4h' | '1d' | '1w'}\n            onTimeframeChange={setTimeframe}\n            height={500}\n            showVolume={true}\n            showIndicators={true}\n            data-testid=\"trading-chart\"\n          />\n        </div>\n\n        {/* AI Signal Generator & Risk Controls */}\n        <div className=\"space-y-6\">\n          <ProCard\n            title=\"AI Signal Generator\"\n            value=\"\"\n            icon={<Brain className=\"w-4 h-4\" />}\n            variant=\"signal\"\n          >\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"symbol\">Trading Pair</Label>\n                <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>\n                  <SelectTrigger data-testid=\"symbol-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"BTCUSD\">BTC/USD</SelectItem>\n                    <SelectItem value=\"ETHUSD\">ETH/USD</SelectItem>\n                    <SelectItem value=\"ADAUSD\">ADA/USD</SelectItem>\n                    <SelectItem value=\"SOLUSD\">SOL/USD</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Current Price</Label>\n                <div className=\"text-xl font-bold text-foreground\" data-testid=\"current-price\">\n                  ${currentPrice > 0 ? currentPrice.toLocaleString() : 'Loading...'}\n                </div>\n              </div>\n\n              <div>\n                <Label>Risk Level: {riskLevel[0]}/5</Label>\n                <Slider\n                  value={riskLevel}\n                  onValueChange={setRiskLevel}\n                  max={5}\n                  min={1}\n                  step={1}\n                  className=\"mt-2\"\n                  data-testid=\"risk-slider\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                  <span>Conservative</span>\n                  <span>Aggressive</span>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleGenerateSignal}\n                disabled={generateSignalMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"generate-signal-btn\"\n              >\n                {generateSignalMutation.isPending ? (\n                  <>\n                    <Activity className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Analyzing Market...\n                  </>\n                ) : (\n                  <>\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    Generate AI Signal\n                  </>\n                )}\n              </Button>\n            </div>\n          </ProCard>\n\n          {/* Professional Risk Management */}\n          <ProCard\n            title=\"Risk Management\"\n            value=\"\"\n            icon={<Shield className=\"w-4 h-4\" />}\n            variant=\"critical\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Auto-Trading</Label>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Execute signals automatically\n                  </p>\n                </div>\n                <Switch \n                  checked={autoTrade} \n                  onCheckedChange={setAutoTrade}\n                  data-testid=\"auto-trade-switch\"\n                />\n              </div>\n\n              {autoTrade && (\n                <Alert>\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <AlertDescription className=\"text-xs\">\n                    Auto-trading is enabled. All signals will be executed automatically within risk limits.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div>\n                <Label>Max Position Size: {maxPositionSize[0]}%</Label>\n                <Slider\n                  value={maxPositionSize}\n                  onValueChange={setMaxPositionSize}\n                  max={25}\n                  min={1}\n                  step={1}\n                  className=\"mt-2\"\n                  data-testid=\"position-size-slider\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Maximum portfolio percentage per trade\n                </p>\n              </div>\n\n              <div>\n                <Label>Daily Loss Limit: ${dailyLossLimit[0]}</Label>\n                <Slider\n                  value={dailyLossLimit}\n                  onValueChange={setDailyLossLimit}\n                  max={2000}\n                  min={100}\n                  step={50}\n                  className=\"mt-2\"\n                  data-testid=\"loss-limit-slider\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Trading stops if daily loss exceeds this amount\n                </p>\n              </div>\n            </div>\n          </ProCard>\n        </div>\n      </div>\n\n      {/* Active Signals & Strategy Performance */}\n      <Tabs defaultValue=\"signals\" className=\"space-y-4\" data-testid=\"trading-tabs\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"signals\" data-testid=\"signals-tab\">Active Signals</TabsTrigger>\n          <TabsTrigger value=\"strategies\" data-testid=\"strategies-tab\">Strategy Performance</TabsTrigger>\n          <TabsTrigger value=\"backtest\" data-testid=\"backtest-tab\">Backtest Results</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"signals\" className=\"space-y-4\" data-testid=\"signals-content\">\n          {signals.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Brain className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No Active Signals</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Generate your first AI trading signal to get started\n                </p>\n                <Button onClick={handleGenerateSignal} data-testid=\"generate-first-signal\">\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  Generate Signal\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {signals.map((signal: any) => {\n                const entryPrice = parseFloat(signal.entryPrice || 0);\n                const targetPrice = parseFloat(signal.targetPrice || 0);\n                const stopLoss = parseFloat(signal.stopLoss || 0);\n                const riskReward = parseFloat(signal.riskReward || 0);\n                const indicators = signal.indicators || {};\n                \n                return (\n                  <Card key={signal.id} className=\"overflow-hidden\" data-testid={`signal-card-${signal.symbol}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          {signal.signal === 'buy' ? (\n                            <div className=\"p-2 bg-green-500/10 rounded-lg\">\n                              <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                            </div>\n                          ) : signal.signal === 'sell' ? (\n                            <div className=\"p-2 bg-red-500/10 rounded-lg\">\n                              <TrendingDown className=\"w-5 h-5 text-red-500\" />\n                            </div>\n                          ) : (\n                            <div className=\"p-2 bg-gray-500/10 rounded-lg\">\n                              <Pause className=\"w-5 h-5 text-gray-500\" />\n                            </div>\n                          )}\n                          <div>\n                            <CardTitle className=\"text-lg\" data-testid={`signal-title-${signal.symbol}`}>\n                              {signal.symbol.replace('USD', '/USD')}\n                            </CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(signal.createdAt).toLocaleString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge \n                          variant={signal.signal === 'buy' ? 'default' : signal.signal === 'sell' ? 'destructive' : 'secondary'}\n                          className=\"text-sm px-3 py-1\"\n                          data-testid={`signal-badge-${signal.symbol}`}\n                        >\n                          {signal.signal.toUpperCase()}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                        <span className=\"text-sm text-muted-foreground\">AI Confidence</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-24 h-2 bg-muted rounded-full overflow-hidden\">\n                            <div \n                              className={`h-full ${signal.confidence >= 70 ? 'bg-green-500' : signal.confidence >= 50 ? 'bg-yellow-500' : 'bg-red-500'}`}\n                              style={{ width: `${signal.confidence}%` }}\n                            />\n                          </div>\n                          <span className=\"font-bold text-sm\" data-testid={`signal-confidence-${signal.symbol}`}>\n                            {signal.confidence}%\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-xs text-muted-foreground\">Entry Price</p>\n                          <p className=\"text-lg font-semibold\" data-testid={`signal-entry-${signal.symbol}`}>\n                            ${entryPrice.toLocaleString()}\n                          </p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-xs text-muted-foreground\">Target Price</p>\n                          <p className=\"text-lg font-semibold text-green-500\" data-testid={`signal-target-${signal.symbol}`}>\n                            ${targetPrice.toLocaleString()}\n                          </p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-xs text-muted-foreground\">Stop Loss</p>\n                          <p className=\"text-lg font-semibold text-red-500\" data-testid={`signal-stoploss-${signal.symbol}`}>\n                            ${stopLoss.toLocaleString()}\n                          </p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-xs text-muted-foreground\">Risk/Reward</p>\n                          <p className=\"text-lg font-semibold\" data-testid={`signal-riskreward-${signal.symbol}`}>\n                            1:{riskReward.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n\n                      {indicators.rsi && (\n                        <div className=\"space-y-2 p-3 bg-muted/20 rounded-lg\">\n                          <p className=\"text-xs font-medium text-muted-foreground\">Technical Indicators</p>\n                          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">RSI:</span>\n                              <span className=\"font-medium\">{indicators.rsi.toFixed(2)}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">MACD:</span>\n                              <span className=\"font-medium\">{indicators.macd?.toFixed(2) || 'N/A'}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">SMA(20):</span>\n                              <span className=\"font-medium\">${indicators.sma20?.toFixed(2) || 'N/A'}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Volume:</span>\n                              <span className={`font-medium ${indicators.volumeTrend > 0 ? 'text-green-500' : 'text-red-500'}`}>\n                                {indicators.volumeTrend?.toFixed(1) || '0'}%\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {signal.reasoning && (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-xs font-medium text-muted-foreground\">AI Analysis</p>\n                          <p className=\"text-sm text-foreground/80 leading-relaxed\" data-testid={`signal-reasoning-${signal.symbol}`}>\n                            {signal.reasoning}\n                          </p>\n                        </div>\n                      )}\n\n                      <div className=\"flex space-x-2 pt-2\">\n                        <Button \n                          className=\"flex-1\"\n                          size=\"sm\"\n                          variant={signal.signal === 'buy' ? 'default' : 'destructive'}\n                          onClick={() => handleExecuteSignal(signal)}\n                          disabled={executeSignalMutation.isPending}\n                          data-testid={`execute-signal-btn-${signal.symbol}`}\n                        >\n                          <Zap className=\"w-4 h-4 mr-2\" />\n                          {executeSignalMutation.isPending ? 'Executing...' : `Execute ${signal.signal === 'buy' ? 'Buy' : 'Sell'}`}\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDismissSignal(signal.id)}\n                          disabled={dismissSignalMutation.isPending}\n                          data-testid={`dismiss-signal-btn-${signal.symbol}`}\n                        >\n                          Dismiss\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"strategies\" className=\"space-y-4\" data-testid=\"strategies-content\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {strategies.length === 0 ? (\n              <Card className=\"md:col-span-2 lg:col-span-3\">\n                <CardContent className=\"text-center py-12\">\n                  <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Active Strategies</h3>\n                  <p className=\"text-muted-foreground\">\n                    Create and deploy trading strategies to automate your trading\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              strategies.map((strategy: any) => (\n                <ProCard\n                  key={strategy.id}\n                  title={strategy.name}\n                  value={`+${strategy.performance?.totalReturn || '0.00'}%`}\n                  subtitle={`${strategy.symbol} â€¢ Win Rate: ${strategy.performance?.winRate || '0'}%`}\n                  trend={strategy.performance?.totalReturn > 0 ? 'up' : 'down'}\n                  variant=\"metric\"\n                >\n                  <div className=\"mt-3 pt-3 border-t border-border space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      <Badge variant={strategy.isActive ? 'default' : 'secondary'} className=\"text-xs\">\n                        {strategy.isActive ? 'Active' : 'Paused'}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Trades:</span>\n                      <span className=\"font-medium\">{strategy.performance?.totalTrades || 0}</span>\n                    </div>\n                    <div className=\"flex space-x-2 mt-2\">\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                        {strategy.isActive ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                        <Settings className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </ProCard>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"backtest\" className=\"space-y-4\" data-testid=\"backtest-content\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"w-5 h-5 mr-2\" />\n                AI Strategy Backtest Results\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <MetricTile\n                  label=\"Total Return\"\n                  value=\"+24.7%\"\n                  change={24.7}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Sharpe Ratio\"\n                  value=\"1.85\"\n                  change={12.3}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Max Drawdown\"\n                  value=\"-8.2%\"\n                  change={-8.2}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Win Rate\"\n                  value=\"68.4%\"\n                  change={5.1}\n                  size=\"sm\"\n                />\n              </div>\n              <div className=\"mt-6 p-4 bg-muted/30 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Comprehensive backtest results with 12 months of historical data\n                  <br />\n                  <span className=\"text-xs\">Last updated: {new Date().toLocaleDateString()}</span>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":27596},"client/src/pages/portfolio.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ProCard, MetricTile } from '@/components/ui/pro-card';\nimport { ProTable, ProTableColumn } from '@/components/ui/pro-table';\nimport { EquityCurve } from '@/components/charts/equity-curve';\nimport { TopNavigation } from '@/components/layout/top-navigation';\nimport { Sidebar } from '@/components/layout/sidebar';\nimport { useMarketPrices } from '@/hooks/use-market-prices';\nimport { useState, useMemo } from 'react';\nimport { \n  TrendingUp, \n  TrendingDown, \n  Wallet, \n  PieChart, \n  BarChart3, \n  Download,\n  RefreshCw,\n  ArrowUpRight,\n  ArrowDownRight,\n  Activity,\n  DollarSign,\n  Target,\n  Shield\n} from 'lucide-react';\n\nexport default function Portfolio() {\n  const { getPrice } = useMarketPrices();\n  const [selectedTimeframe, setSelectedTimeframe] = useState('1M');\n\n  const { data: portfolioData } = useQuery({\n    queryKey: ['/api/portfolio'],\n    refetchInterval: 5000,\n  });\n\n  const { data: tradesData } = useQuery({\n    queryKey: ['/api/trades'],\n    refetchInterval: 30000,\n  });\n\n  const portfolio = (portfolioData as any)?.portfolio;\n  const holdings = (portfolioData as any)?.holdings || [];\n  const trades = (tradesData as any)?.trades || [];\n\n  // Calculate enhanced portfolio metrics\n  const totalBalance = portfolio ? parseFloat(portfolio.totalBalance) : 0;\n  const availableBalance = portfolio ? parseFloat(portfolio.availableBalance) : 0;\n  const tradingBalance = portfolio ? parseFloat(portfolio.tradingBalance) : 0;\n  const pnl24h = portfolio ? parseFloat(portfolio.pnl24h) : 0;\n  const pnlPercentage = portfolio ? parseFloat(portfolio.pnlPercentage24h) : 0;\n\n  // Calculate additional metrics\n  const totalInvested = totalBalance - pnl24h;\n  const realizedPnL = trades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl || '0'), 0);\n  const unrealizedPnL = pnl24h - realizedPnL;\n  \n  // Performance calculations\n  const winningTrades = trades.filter((t: any) => parseFloat(t.pnl) > 0);\n  const losingTrades = trades.filter((t: any) => parseFloat(t.pnl) < 0);\n  const winRate = trades.length > 0 ? (winningTrades.length / trades.length) * 100 : 0;\n  const avgWin = winningTrades.length > 0 ? \n    winningTrades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl), 0) / winningTrades.length : 0;\n  const avgLoss = losingTrades.length > 0 ? \n    Math.abs(losingTrades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl), 0) / losingTrades.length) : 0;\n\n  // Generate mock equity curve data (would come from backend in real app)\n  const equityData = useMemo(() => {\n    const data = [];\n    let equity = totalInvested;\n    const days = 30;\n    \n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - i));\n      const change = (Math.random() - 0.48) * 200; // Slight upward bias\n      equity += change;\n      \n      data.push({\n        timestamp: date.toISOString(),\n        equity: equity,\n        drawdown: equity < totalInvested ? ((equity - totalInvested) / totalInvested) * 100 : 0\n      });\n    }\n    \n    return data;\n  }, [totalInvested]);\n\n  // Holdings table columns\n  const holdingsColumns: ProTableColumn[] = [\n    {\n      key: 'symbol',\n      title: 'Asset',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n            <span className=\"text-xs font-bold text-primary\">\n              {value.replace('USD', '').slice(0, 2)}\n            </span>\n          </div>\n          <span className=\"font-medium\">{value.replace('USD', '/USD')}</span>\n        </div>\n      )\n    },\n    {\n      key: 'amount',\n      title: 'Amount',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string) => parseFloat(value).toFixed(6)\n    },\n    {\n      key: 'averagePrice',\n      title: 'Avg Price',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string) => `$${parseFloat(value).toFixed(2)}`\n    },\n    {\n      key: 'currentPrice',\n      title: 'Current Price',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string, row: any) => {\n        const currentPrice = getPrice(row.symbol);\n        return `$${currentPrice.toFixed(2)}`;\n      }\n    },\n    {\n      key: 'value',\n      title: 'Market Value',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string, row: any) => {\n        const currentPrice = getPrice(row.symbol);\n        const marketValue = currentPrice * parseFloat(row.amount);\n        return `$${marketValue.toFixed(2)}`;\n      }\n    },\n    {\n      key: 'pnl',\n      title: 'P&L',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string, row: any) => {\n        const pnl = parseFloat(row.pnl || '0');\n        const pnlPercent = parseFloat(row.pnlPercentage || '0');\n        return (\n          <div className={`${pnl >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n            <div className=\"font-medium\">${pnl.toFixed(2)}</div>\n            <div className=\"text-xs\">({pnlPercent.toFixed(2)}%)</div>\n          </div>\n        );\n      }\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"portfolio-page\">\n      <TopNavigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-[calc(100vh-73px)] overflow-y-auto\">\n            <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-foreground\" data-testid=\"page-title\">\n            Portfolio Dashboard\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Real-time portfolio performance and asset allocation\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <ProCard\n          title=\"Total Portfolio Value\"\n          value={`$${totalBalance.toLocaleString()}`}\n          change={pnlPercentage}\n          changeType=\"percentage\"\n          trend={pnl24h >= 0 ? 'up' : 'down'}\n          icon={<Wallet className=\"w-5 h-5\" />}\n          variant=\"metric\"\n          data-testid=\"total-balance-card\"\n        />\n        \n        <ProCard\n          title=\"Available Cash\"\n          value={`$${availableBalance.toLocaleString()}`}\n          subtitle=\"Ready to trade\"\n          icon={<DollarSign className=\"w-5 h-5\" />}\n          data-testid=\"available-balance-card\"\n        />\n        \n        <ProCard\n          title=\"Active Positions\"\n          value={`$${tradingBalance.toLocaleString()}`}\n          subtitle={`${holdings.length} assets`}\n          icon={<Activity className=\"w-5 h-5\" />}\n          data-testid=\"trading-balance-card\"\n        />\n        \n        <ProCard\n          title=\"Today's P&L\"\n          value={`$${pnl24h.toFixed(2)}`}\n          change={pnlPercentage}\n          changeType=\"percentage\"\n          trend={pnl24h >= 0 ? 'up' : 'down'}\n          icon={pnl24h >= 0 ? <ArrowUpRight className=\"w-5 h-5\" /> : <ArrowDownRight className=\"w-5 h-5\" />}\n          variant={pnl24h >= 0 ? 'default' : 'critical'}\n          data-testid=\"pnl-card\"\n        />\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <MetricTile\n          label=\"Win Rate\"\n          value={`${winRate.toFixed(1)}%`}\n          change={winRate > 50 ? 5.2 : -2.1}\n          icon={<Target className=\"w-4 h-4 text-green-500\" />}\n          trend={winRate > 50 ? 'up' : 'down'}\n        />\n        <MetricTile\n          label=\"Avg Win\"\n          value={`$${avgWin.toFixed(2)}`}\n          changeLabel=\"per trade\"\n          icon={<TrendingUp className=\"w-4 h-4 text-green-500\" />}\n        />\n        <MetricTile\n          label=\"Avg Loss\"\n          value={`$${avgLoss.toFixed(2)}`}\n          changeLabel=\"per trade\"\n          icon={<TrendingDown className=\"w-4 h-4 text-red-500\" />}\n        />\n        <MetricTile\n          label=\"Risk Score\"\n          value=\"2.4/5\"\n          change={-0.3}\n          icon={<Shield className=\"w-4 h-4 text-blue-500\" />}\n          trend=\"down\"\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Equity Curve */}\n        <div className=\"lg:col-span-2\">\n          <EquityCurve\n            data={equityData}\n            height={300}\n            title=\"Portfolio Performance\"\n            showDrawdown={true}\n          />\n        </div>\n\n        {/* Asset Allocation */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <PieChart className=\"w-5 h-5 mr-2\" />\n              Asset Allocation\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {holdings.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <PieChart className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No assets to display</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {holdings.map((holding: any, index: number) => {\n                  const currentPrice = getPrice(holding.symbol);\n                  const value = currentPrice * parseFloat(holding.amount);\n                  const percentage = totalBalance > 0 ? (value / totalBalance) * 100 : 0;\n                  const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-orange-500', 'bg-red-500'];\n                  \n                  return (\n                    <div key={holding.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`w-3 h-3 rounded-full ${colors[index % colors.length]}`}></div>\n                          <span className=\"font-medium text-sm\">\n                            {holding.symbol.replace('USD', '/USD')}\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium text-sm\">{percentage.toFixed(1)}%</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            ${value.toFixed(2)}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full ${colors[index % colors.length]}`}\n                          style={{ width: `${percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Tables */}\n      <Tabs defaultValue=\"holdings\" className=\"space-y-4\" data-testid=\"portfolio-tabs\">\n        <TabsList>\n          <TabsTrigger value=\"holdings\" data-testid=\"holdings-tab\">Current Holdings</TabsTrigger>\n          <TabsTrigger value=\"performance\" data-testid=\"performance-tab\">Performance Analysis</TabsTrigger>\n          <TabsTrigger value=\"allocation\" data-testid=\"allocation-tab\">Risk & Allocation</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"holdings\" className=\"space-y-4\" data-testid=\"holdings-content\">\n          <ProCard\n            title=\"Current Holdings\"\n            value={`${holdings.length} Assets`}\n            subtitle={`Total Value: $${totalBalance.toLocaleString()}`}\n            icon={<Wallet className=\"w-4 h-4\" />}\n          >\n            {holdings.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Wallet className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No Holdings Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Start trading to build your portfolio\n                </p>\n                <Button data-testid=\"start-trading-btn\">\n                  Start Trading\n                </Button>\n              </div>\n            ) : (\n              <ProTable\n                data={holdings}\n                columns={holdingsColumns}\n                searchable={true}\n                searchPlaceholder=\"Search holdings...\"\n                exportable={true}\n                onExport={() => console.log('Export holdings')}\n                emptyState={\n                  <div className=\"text-center py-8\">\n                    <Wallet className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No holdings found</p>\n                  </div>\n                }\n              />\n            )}\n          </ProCard>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\" data-testid=\"performance-content\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <ProCard\n              title=\"Realized P&L\"\n              value={`$${realizedPnL.toFixed(2)}`}\n              change={realizedPnL > 0 ? 15.2 : -8.4}\n              changeType=\"percentage\"\n              trend={realizedPnL >= 0 ? 'up' : 'down'}\n              icon={<BarChart3 className=\"w-4 h-4\" />}\n              variant=\"metric\"\n            >\n              <div className=\"mt-4 pt-4 border-t border-border\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Closed Positions</span>\n                  <span className=\"font-medium\">{trades.length}</span>\n                </div>\n              </div>\n            </ProCard>\n\n            <ProCard\n              title=\"Unrealized P&L\"\n              value={`$${unrealizedPnL.toFixed(2)}`}\n              change={unrealizedPnL > 0 ? 8.7 : -5.2}\n              changeType=\"percentage\"\n              trend={unrealizedPnL >= 0 ? 'up' : 'down'}\n              icon={<Activity className=\"w-4 h-4\" />}\n              variant=\"metric\"\n            >\n              <div className=\"mt-4 pt-4 border-t border-border\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Open Positions</span>\n                  <span className=\"font-medium\">{holdings.length}</span>\n                </div>\n              </div>\n            </ProCard>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Breakdown</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <MetricTile\n                  label=\"Total Return\"\n                  value={`${((pnl24h / totalInvested) * 100).toFixed(2)}%`}\n                  change={(pnl24h / totalInvested) * 100}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Best Day\"\n                  value=\"+$1,247\"\n                  change={15.7}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Worst Day\"\n                  value=\"-$423\"\n                  change={-8.3}\n                  size=\"sm\"\n                />\n                <MetricTile\n                  label=\"Volatility\"\n                  value=\"12.4%\"\n                  change={-2.1}\n                  size=\"sm\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"allocation\" className=\"space-y-4\" data-testid=\"allocation-content\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Metrics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Portfolio Beta</span>\n                    <span className=\"font-medium\">1.24</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Sharpe Ratio</span>\n                    <span className=\"font-medium\">1.85</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Max Drawdown</span>\n                    <span className=\"font-medium text-red-600\">-8.2%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">VaR (95%)</span>\n                    <span className=\"font-medium\">-$342</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Allocation Targets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between mb-1\">\n                      <span className=\"text-sm\">Large Cap (BTC, ETH)</span>\n                      <span className=\"text-sm font-medium\">70%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '70%' }}></div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-1\">\n                      <span className=\"text-sm\">Mid Cap (ADA, SOL)</span>\n                      <span className=\"text-sm font-medium\">20%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '20%' }}></div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between mb-1\">\n                      <span className=\"text-sm\">Cash</span>\n                      <span className=\"text-sm font-medium\">10%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-gray-500 h-2 rounded-full\" style={{ width: '10%' }}></div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19696},"client/src/pages/settings.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Slider } from '@/components/ui/slider';\nimport { TopNavigation } from '@/components/layout/top-navigation';\nimport { Sidebar } from '@/components/layout/sidebar';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useState, useEffect } from 'react';\n\nexport default function Settings() {\n  const { toast } = useToast();\n\n  const { data: userData } = useQuery({\n    queryKey: ['/api/user/profile'],\n    refetchInterval: 60000,\n  });\n\n  const user = (userData as any)?.user;\n  const riskSettings = user?.riskSettings || {};\n\n  const [riskEnabled, setRiskEnabled] = useState(false);\n  const [maxPositionSize, setMaxPositionSize] = useState('');\n  const [maxDailyLoss, setMaxDailyLoss] = useState('');\n  const [maxOpenPositions, setMaxOpenPositions] = useState('');\n\n  // Sync local state with loaded user data\n  useEffect(() => {\n    if (user?.riskSettings) {\n      setRiskEnabled(user.riskSettings.enabled || false);\n      setMaxPositionSize(user.riskSettings.maxPositionSize || '');\n      setMaxDailyLoss(user.riskSettings.maxDailyLoss || '');\n      setMaxOpenPositions(user.riskSettings.maxOpenPositions?.toString() || '');\n    }\n  }, [user]);\n\n  const updateRiskSettingsMutation = useMutation({\n    mutationFn: async (settings: any) => {\n      const response = await apiRequest('PUT', '/api/user/risk-settings', settings);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Risk Settings Updated',\n        description: 'Your risk management settings have been saved successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/profile'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update risk settings',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const handleSaveRiskSettings = () => {\n    updateRiskSettingsMutation.mutate({\n      enabled: riskEnabled,\n      maxPositionSize: maxPositionSize,\n      maxDailyLoss: maxDailyLoss,\n      maxOpenPositions: maxOpenPositions,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"settings-page\">\n      <TopNavigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-[calc(100vh-73px)] overflow-y-auto\">\n            <div className=\"p-6 space-y-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Settings</h1>\n                <p className=\"text-muted-foreground\">\n                  Manage your account, trading preferences, and security settings\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"account\" className=\"space-y-4\" data-testid=\"settings-tabs\">\n        <TabsList>\n          <TabsTrigger value=\"account\" data-testid=\"account-tab\">Account</TabsTrigger>\n          <TabsTrigger value=\"trading\" data-testid=\"trading-tab\">Trading</TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"notifications-tab\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"security-tab\">Security</TabsTrigger>\n          <TabsTrigger value=\"api\" data-testid=\"api-tab\">API Keys</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"space-y-4\" data-testid=\"account-content\">\n          <Card data-testid=\"profile-card\">\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={user?.email || ''}\n                  disabled\n                  data-testid=\"email-input\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Email cannot be changed as it's linked to your Google account\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"display-name\">Display Name</Label>\n                <Input\n                  id=\"display-name\"\n                  type=\"text\"\n                  value={user?.displayName || ''}\n                  placeholder=\"Enter your display name\"\n                  data-testid=\"display-name-input\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"timezone\">Timezone</Label>\n                <Select defaultValue=\"UTC\">\n                  <SelectTrigger data-testid=\"timezone-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"UTC\">UTC</SelectItem>\n                    <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                    <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                    <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                    <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                    <SelectItem value=\"Europe/London\">London Time</SelectItem>\n                    <SelectItem value=\"Asia/Tokyo\">Tokyo Time</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button data-testid=\"save-profile-btn\">\n                Save Profile Changes\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"account-type-card\">\n            <CardHeader>\n              <CardTitle>Account Type</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"font-medium\">Demo Account</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Trading with virtual funds for practice\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-orange-600 font-medium\">DEMO MODE</div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" data-testid=\"upgrade-account-btn\">\n                    Upgrade to Live\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trading\" className=\"space-y-4\" data-testid=\"trading-content\">\n          <Card data-testid=\"risk-management-card\">\n            <CardHeader>\n              <CardTitle>Risk Management</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Enable Risk Management</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enforce position limits and loss caps on all trades\n                  </p>\n                </div>\n                <Switch \n                  checked={riskEnabled}\n                  onCheckedChange={setRiskEnabled}\n                  data-testid=\"risk-enabled-switch\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"max-position-size\">Maximum Position Size (USD)</Label>\n                <Input\n                  id=\"max-position-size\"\n                  type=\"number\"\n                  value={maxPositionSize}\n                  onChange={(e) => setMaxPositionSize(e.target.value)}\n                  placeholder=\"e.g. 2500\"\n                  disabled={!riskEnabled}\n                  data-testid=\"input-max-position-size\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Maximum dollar value for a single trade position\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"max-daily-loss\">Maximum Daily Loss (USD)</Label>\n                <Input\n                  id=\"max-daily-loss\"\n                  type=\"number\"\n                  value={maxDailyLoss}\n                  onChange={(e) => setMaxDailyLoss(e.target.value)}\n                  placeholder=\"e.g. 500\"\n                  disabled={!riskEnabled}\n                  data-testid=\"input-max-daily-loss\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Maximum total loss allowed per day across all trades\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"max-open-positions\">Maximum Open Positions</Label>\n                <Input\n                  id=\"max-open-positions\"\n                  type=\"number\"\n                  value={maxOpenPositions}\n                  onChange={(e) => setMaxOpenPositions(e.target.value)}\n                  placeholder=\"e.g. 10\"\n                  disabled={!riskEnabled}\n                  data-testid=\"input-max-open-positions\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Maximum number of concurrent open positions\n                </p>\n              </div>\n\n              <div className=\"pt-2 border-t\">\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  <p><strong>Current Settings:</strong></p>\n                  <p>â€¢ Risk Management: {riskEnabled ? 'Enabled' : 'Disabled'}</p>\n                  {riskEnabled && (\n                    <>\n                      <p>â€¢ Max Position Size: ${maxPositionSize || 'Not set'}</p>\n                      <p>â€¢ Max Daily Loss: ${maxDailyLoss || 'Not set'}</p>\n                      <p>â€¢ Max Open Positions: {maxOpenPositions || 'Not set'}</p>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSaveRiskSettings}\n                disabled={updateRiskSettingsMutation.isPending}\n                data-testid=\"save-risk-settings-btn\"\n              >\n                {updateRiskSettingsMutation.isPending ? 'Saving...' : 'Save Risk Settings'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"auto-trading-card\">\n            <CardHeader>\n              <CardTitle>Auto-Trading Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Enable Auto-Trading</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Allow AI signals to execute trades automatically\n                  </p>\n                </div>\n                <Switch data-testid=\"auto-trading-switch\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Smart Order Routing</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Optimize trade execution across exchanges\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"smart-routing-switch\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Portfolio Rebalancing</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically rebalance portfolio based on targets\n                  </p>\n                </div>\n                <Switch data-testid=\"rebalancing-switch\" />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\" data-testid=\"notifications-content\">\n          <Card data-testid=\"notification-preferences-card\">\n            <CardHeader>\n              <CardTitle>Notification Preferences</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Trade Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when trades are executed\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"trade-notifications-switch\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>AI Signal Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive alerts for new AI trading signals\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"signal-alerts-switch\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Price Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when assets reach target prices\n                  </p>\n                </div>\n                <Switch data-testid=\"price-alerts-switch\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Portfolio Milestones</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Celebrate portfolio performance milestones\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"milestones-switch\" />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-4\" data-testid=\"security-content\">\n          <Card data-testid=\"security-settings-card\">\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Session Timeout</Label>\n                <Select defaultValue=\"30m\">\n                  <SelectTrigger className=\"mt-1\" data-testid=\"session-timeout-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"15m\">15 minutes</SelectItem>\n                    <SelectItem value=\"30m\">30 minutes</SelectItem>\n                    <SelectItem value=\"1h\">1 hour</SelectItem>\n                    <SelectItem value=\"4h\">4 hours</SelectItem>\n                    <SelectItem value=\"never\">Never</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Two-Factor Authentication</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Add an extra layer of security to your account\n                  </p>\n                </div>\n                <Button variant=\"outline\" data-testid=\"setup-2fa-btn\">\n                  Setup 2FA\n                </Button>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Login Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified of new login attempts\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"login-notifications-switch\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"active-sessions-card\">\n            <CardHeader>\n              <CardTitle>Active Sessions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">Current Session</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Chrome on Windows â€¢ Active now\n                    </div>\n                  </div>\n                  <div className=\"text-green-600 text-sm\">Current</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"api\" className=\"space-y-4\" data-testid=\"api-content\">\n          <Card data-testid=\"api-keys-card\">\n            <CardHeader>\n              <CardTitle>API Keys Management</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"kraken-api-key\">Kraken API Key</Label>\n                <Input\n                  id=\"kraken-api-key\"\n                  type=\"password\"\n                  placeholder=\"Enter your Kraken API key\"\n                  data-testid=\"kraken-api-key-input\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Required for live trading functionality\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"kraken-secret\">Kraken API Secret</Label>\n                <Input\n                  id=\"kraken-secret\"\n                  type=\"password\"\n                  placeholder=\"Enter your Kraken API secret\"\n                  data-testid=\"kraken-secret-input\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Sandbox Mode</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use Kraken sandbox for testing\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"sandbox-mode-switch\" />\n              </div>\n\n              <Button data-testid=\"save-api-keys-btn\">\n                Save API Keys\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"api-status-card\">\n            <CardHeader>\n              <CardTitle>API Connection Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Kraken Exchange</span>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                    <span className=\"text-sm text-green-600\">Connected</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>OpenAI API</span>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                    <span className=\"text-sm text-green-600\">Connected</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>WebSocket Feed</span>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                    <span className=\"text-sm text-green-600\">Active</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":20196},"client/src/pages/trades.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { ProCard, MetricTile } from '@/components/ui/pro-card';\nimport { ProTable, ProTableColumn } from '@/components/ui/pro-table';\nimport { TopNavigation } from '@/components/layout/top-navigation';\nimport { Sidebar } from '@/components/layout/sidebar';\nimport { useState, useMemo } from 'react';\nimport { \n  History, \n  TrendingUp, \n  TrendingDown, \n  Filter, \n  Download,\n  Eye,\n  MoreHorizontal,\n  Calendar,\n  DollarSign,\n  Target,\n  Activity,\n  BarChart3,\n  PieChart\n} from 'lucide-react';\nimport {\n  DropdownMenuItem\n} from '@/components/ui/dropdown-menu';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n\nexport default function Trades() {\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(50);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterSymbol, setFilterSymbol] = useState('all');\n  const [filterSide, setFilterSide] = useState('all');\n  const [filterTimeframe, setFilterTimeframe] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTrade, setSelectedTrade] = useState<any>(null);\n\n  // Build query parameters for backend filtering\n  const queryParams = useMemo(() => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n    if (filterStatus !== 'all') params.append('status', filterStatus);\n    if (filterSymbol !== 'all') params.append('symbol', filterSymbol);\n    if (filterSide !== 'all') params.append('side', filterSide);\n    return params.toString();\n  }, [page, limit, filterStatus, filterSymbol, filterSide]);\n\n  const { data: tradesData } = useQuery({\n    queryKey: ['/api/trades', queryParams],\n    queryFn: async () => {\n      const token = localStorage.getItem('firebase-token');\n      const response = await fetch(`/api/trades?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch trades');\n      return response.json();\n    },\n    refetchInterval: 30000,\n  });\n\n  const trades = (tradesData as any)?.trades || [];\n  const pagination = (tradesData as any)?.pagination || { page: 1, limit: 50, total: 0, totalPages: 0 };\n\n  // Client-side search filter (for search within current page results)\n  const filteredTrades = useMemo(() => {\n    if (!searchTerm) return trades;\n    return trades.filter((trade: any) => \n      trade.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      trade.id.toString().includes(searchTerm)\n    );\n  }, [trades, searchTerm]);\n\n  // Calculate comprehensive statistics\n  const totalTrades = trades.length;\n  const winningTrades = trades.filter((trade: any) => parseFloat(trade.pnl) > 0);\n  const losingTrades = trades.filter((trade: any) => parseFloat(trade.pnl) < 0);\n  const breakEvenTrades = trades.filter((trade: any) => parseFloat(trade.pnl) === 0);\n  \n  const winRate = totalTrades > 0 ? (winningTrades.length / totalTrades) * 100 : 0;\n  const totalPnL = trades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl || '0'), 0);\n  const avgTrade = totalTrades > 0 ? totalPnL / totalTrades : 0;\n  \n  const avgWin = winningTrades.length > 0 ? \n    winningTrades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl), 0) / winningTrades.length : 0;\n  const avgLoss = losingTrades.length > 0 ? \n    Math.abs(losingTrades.reduce((sum: number, trade: any) => sum + parseFloat(trade.pnl), 0) / losingTrades.length) : 0;\n  \n  const profitFactor = avgLoss > 0 ? avgWin / avgLoss : 0;\n  const totalVolume = trades.reduce((sum: number, trade: any) => \n    sum + (parseFloat(trade.amount) * parseFloat(trade.price)), 0);\n\n  // Best and worst trades\n  const bestTrade = trades.length > 0 ? trades.reduce((best: any, trade: any) => \n    parseFloat(trade.pnl) > parseFloat(best.pnl || '0') ? trade : best) : null;\n  const worstTrade = trades.length > 0 ? trades.reduce((worst: any, trade: any) => \n    parseFloat(trade.pnl) < parseFloat(worst.pnl || '0') ? trade : worst) : null;\n\n  // Symbol performance\n  const symbolStats = useMemo(() => {\n    const stats: any = {};\n    trades.forEach((trade: any) => {\n      const symbol = trade.symbol;\n      if (!stats[symbol]) {\n        stats[symbol] = { \n          trades: 0, \n          pnl: 0, \n          wins: 0, \n          volume: 0,\n          avgHoldTime: 0 \n        };\n      }\n      stats[symbol].trades += 1;\n      stats[symbol].pnl += parseFloat(trade.pnl || '0');\n      stats[symbol].volume += parseFloat(trade.amount) * parseFloat(trade.price);\n      if (parseFloat(trade.pnl || '0') > 0) stats[symbol].wins += 1;\n    });\n    return stats;\n  }, [trades]);\n\n  // Table columns\n  const tradesColumns: ProTableColumn[] = [\n    {\n      key: 'createdAt',\n      title: 'Date/Time',\n      sortable: true,\n      width: '140px',\n      render: (value: string) => (\n        <div>\n          <div className=\"font-medium text-sm\">\n            {new Date(value).toLocaleDateString()}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {new Date(value).toLocaleTimeString()}\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'symbol',\n      title: 'Symbol',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center\">\n            <span className=\"text-xs font-bold text-primary\">\n              {value.replace('USD', '').slice(0, 2)}\n            </span>\n          </div>\n          <span className=\"font-medium\">{value.replace('USD', '/USD')}</span>\n        </div>\n      )\n    },\n    {\n      key: 'side',\n      title: 'Side',\n      sortable: true,\n      render: (value: string) => (\n        <Badge variant={value === 'buy' ? 'default' : 'destructive'} className=\"text-xs\">\n          {value.toUpperCase()}\n        </Badge>\n      )\n    },\n    {\n      key: 'amount',\n      title: 'Amount',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string) => parseFloat(value).toFixed(6)\n    },\n    {\n      key: 'price',\n      title: 'Price',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string) => `$${parseFloat(value).toFixed(2)}`\n    },\n    {\n      key: 'total',\n      title: 'Total Value',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string, row: any) => {\n        const total = parseFloat(row.amount) * parseFloat(row.price);\n        return `$${total.toFixed(2)}`;\n      }\n    },\n    {\n      key: 'pnl',\n      title: 'P&L',\n      sortable: true,\n      className: 'text-right',\n      render: (value: string, row: any) => {\n        const pnl = parseFloat(row.pnl || '0');\n        return (\n          <div className={`${pnl >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n            <div className=\"font-medium\">${pnl.toFixed(2)}</div>\n          </div>\n        );\n      }\n    },\n    {\n      key: 'status',\n      title: 'Status',\n      sortable: true,\n      render: (value: string) => {\n        const variants: any = {\n          completed: 'default',\n          pending: 'secondary',\n          cancelled: 'destructive',\n          failed: 'destructive'\n        };\n        return (\n          <Badge variant={variants[value] || 'secondary'} className=\"text-xs\">\n            {value.charAt(0).toUpperCase() + value.slice(1)}\n          </Badge>\n        );\n      }\n    }\n  ];\n\n  const TradeDetailDialog = ({ trade }: { trade: any }) => (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\">\n          <Eye className=\"w-4 h-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Trade Details - #{trade.id}</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Symbol</Label>\n              <div className=\"font-medium\">{trade.symbol.replace('USD', '/USD')}</div>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Side</Label>\n              <Badge variant={trade.side === 'buy' ? 'default' : 'destructive'}>\n                {trade.side.toUpperCase()}\n              </Badge>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Amount</Label>\n              <div className=\"font-medium\">{parseFloat(trade.amount).toFixed(6)}</div>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Price</Label>\n              <div className=\"font-medium\">${parseFloat(trade.price).toFixed(2)}</div>\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Total Value</Label>\n              <div className=\"font-medium\">\n                ${(parseFloat(trade.amount) * parseFloat(trade.price)).toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">P&L</Label>\n              <div className={`font-medium ${parseFloat(trade.pnl || '0') >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                ${parseFloat(trade.pnl || '0').toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Status</Label>\n              <div className=\"font-medium\">{trade.status}</div>\n            </div>\n            <div>\n              <Label className=\"text-sm text-muted-foreground\">Date</Label>\n              <div className=\"font-medium\">\n                {new Date(trade.createdAt).toLocaleString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"trades-page\">\n      <TopNavigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-[calc(100vh-73px)] overflow-y-auto\">\n            <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-foreground\" data-testid=\"page-title\">\n            Trade History\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Comprehensive trading performance analysis and history\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Date Range\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <ProCard\n          title=\"Total P&L\"\n          value={`$${totalPnL.toFixed(2)}`}\n          change={totalPnL > 0 ? 15.2 : -8.4}\n          changeType=\"percentage\"\n          trend={totalPnL >= 0 ? 'up' : 'down'}\n          icon={<DollarSign className=\"w-5 h-5\" />}\n          variant=\"metric\"\n          data-testid=\"total-pnl-card\"\n        />\n        \n        <ProCard\n          title=\"Win Rate\"\n          value={`${winRate.toFixed(1)}%`}\n          change={winRate > 50 ? 5.2 : -2.8}\n          changeType=\"percentage\"\n          trend={winRate > 50 ? 'up' : 'down'}\n          icon={<Target className=\"w-5 h-5\" />}\n          data-testid=\"win-rate-card\"\n        />\n        \n        <ProCard\n          title=\"Total Trades\"\n          value={totalTrades}\n          subtitle={`${winningTrades.length}W / ${losingTrades.length}L`}\n          icon={<Activity className=\"w-5 h-5\" />}\n          data-testid=\"total-trades-card\"\n        />\n        \n        <ProCard\n          title=\"Avg Trade\"\n          value={`$${avgTrade.toFixed(2)}`}\n          change={avgTrade > 0 ? 8.7 : -12.3}\n          changeType=\"percentage\"\n          trend={avgTrade >= 0 ? 'up' : 'down'}\n          icon={<BarChart3 className=\"w-5 h-5\" />}\n          data-testid=\"avg-trade-card\"\n        />\n      </div>\n\n      {/* Advanced Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <MetricTile\n          label=\"Profit Factor\"\n          value={profitFactor.toFixed(2)}\n          change={profitFactor > 1 ? 12.5 : -8.2}\n          icon={<TrendingUp className=\"w-4 h-4 text-green-500\" />}\n          trend={profitFactor > 1 ? 'up' : 'down'}\n        />\n        <MetricTile\n          label=\"Avg Win\"\n          value={`$${avgWin.toFixed(2)}`}\n          changeLabel=\"per win\"\n          icon={<TrendingUp className=\"w-4 h-4 text-green-500\" />}\n        />\n        <MetricTile\n          label=\"Avg Loss\"\n          value={`$${avgLoss.toFixed(2)}`}\n          changeLabel=\"per loss\"\n          icon={<TrendingDown className=\"w-4 h-4 text-red-500\" />}\n        />\n        <MetricTile\n          label=\"Total Volume\"\n          value={`$${(totalVolume / 1000).toFixed(0)}K`}\n          change={23.4}\n          icon={<BarChart3 className=\"w-4 h-4 text-blue-500\" />}\n          trend=\"up\"\n        />\n      </div>\n\n      {/* Advanced Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Advanced Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium\">Search</Label>\n              <Input\n                placeholder=\"Symbol or ID...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"search-input\"\n              />\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium\">Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger data-testid=\"status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium\">Symbol</Label>\n              <Select value={filterSymbol} onValueChange={setFilterSymbol}>\n                <SelectTrigger data-testid=\"symbol-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Symbols</SelectItem>\n                  <SelectItem value=\"BTCUSD\">BTC/USD</SelectItem>\n                  <SelectItem value=\"ETHUSD\">ETH/USD</SelectItem>\n                  <SelectItem value=\"ADAUSD\">ADA/USD</SelectItem>\n                  <SelectItem value=\"SOLUSD\">SOL/USD</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium\">Side</Label>\n              <Select value={filterSide} onValueChange={setFilterSide}>\n                <SelectTrigger data-testid=\"side-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sides</SelectItem>\n                  <SelectItem value=\"buy\">Buy</SelectItem>\n                  <SelectItem value=\"sell\">Sell</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium\">Time Range</Label>\n              <Select value={filterTimeframe} onValueChange={setFilterTimeframe}>\n                <SelectTrigger data-testid=\"timeframe-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"1d\">Last 24 Hours</SelectItem>\n                  <SelectItem value=\"7d\">Last 7 Days</SelectItem>\n                  <SelectItem value=\"30d\">Last 30 Days</SelectItem>\n                  <SelectItem value=\"90d\">Last 90 Days</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm('');\n                  setFilterStatus('all');\n                  setFilterSymbol('all');\n                  setFilterSide('all');\n                  setFilterTimeframe('all');\n                }}\n                data-testid=\"clear-filters-btn\"\n              >\n                Clear All\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"trades\" className=\"space-y-4\" data-testid=\"trades-tabs\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"trades\" data-testid=\"trades-tab\">All Trades ({filteredTrades.length})</TabsTrigger>\n          <TabsTrigger value=\"performance\" data-testid=\"performance-tab\">Performance Analysis</TabsTrigger>\n          <TabsTrigger value=\"symbols\" data-testid=\"symbols-tab\">Symbol Breakdown</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"trades\" className=\"space-y-4\" data-testid=\"trades-content\">\n          <ProTable\n            data={filteredTrades}\n            columns={tradesColumns}\n            searchable={false}\n            exportable={true}\n            onExport={() => console.log('Export trades')}\n            pagination={{\n              page,\n              pageSize: limit,\n              total: pagination.total,\n              onPageChange: setPage\n            }}\n            actions={(row) => (\n              <>\n                <DropdownMenuItem onClick={() => setSelectedTrade(row)}>\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  View Details\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Trade\n                </DropdownMenuItem>\n              </>\n            )}\n            emptyState={\n              <div className=\"text-center py-12\">\n                <History className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">\n                  {trades.length === 0 ? 'No trades yet' : 'No trades match your filters'}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {trades.length === 0 ? 'Start trading to see your transaction history' : 'Try adjusting your filters'}\n                </p>\n              </div>\n            }\n          />\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\" data-testid=\"performance-content\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Best & Worst Trades */}\n            <div className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Best Trade</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {bestTrade ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Symbol:</span>\n                        <span className=\"font-medium\">{bestTrade.symbol.replace('USD', '/USD')}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">P&L:</span>\n                        <span className=\"font-medium text-green-600\">\n                          +${parseFloat(bestTrade.pnl).toFixed(2)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Date:</span>\n                        <span className=\"text-sm\">{new Date(bestTrade.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground\">No profitable trades yet</p>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Worst Trade</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {worstTrade ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Symbol:</span>\n                        <span className=\"font-medium\">{worstTrade.symbol.replace('USD', '/USD')}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">P&L:</span>\n                        <span className=\"font-medium text-red-600\">\n                          ${parseFloat(worstTrade.pnl).toFixed(2)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Date:</span>\n                        <span className=\"text-sm\">{new Date(worstTrade.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground\">No losing trades yet</p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Trading Statistics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Trading Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <MetricTile\n                    label=\"Winning Trades\"\n                    value={winningTrades.length}\n                    change={winRate}\n                    size=\"sm\"\n                  />\n                  <MetricTile\n                    label=\"Losing Trades\"\n                    value={losingTrades.length}\n                    change={100 - winRate}\n                    size=\"sm\"\n                  />\n                  <MetricTile\n                    label=\"Break Even\"\n                    value={breakEvenTrades.length}\n                    changeLabel=\"trades\"\n                    size=\"sm\"\n                  />\n                  <MetricTile\n                    label=\"Largest Win\"\n                    value={bestTrade ? `$${parseFloat(bestTrade.pnl).toFixed(0)}` : '$0'}\n                    changeLabel=\"\"\n                    size=\"sm\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"symbols\" className=\"space-y-4\" data-testid=\"symbols-content\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Object.keys(symbolStats).length === 0 ? (\n              <Card className=\"md:col-span-2 lg:col-span-3\">\n                <CardContent className=\"text-center py-12\">\n                  <PieChart className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No trading data available</h3>\n                  <p className=\"text-muted-foreground\">Start trading to see symbol performance breakdown</p>\n                </CardContent>\n              </Card>\n            ) : (\n              Object.entries(symbolStats).map(([symbol, stats]: [string, any]) => (\n                <ProCard\n                  key={symbol}\n                  title={symbol.replace('USD', '/USD')}\n                  value={`$${stats.pnl.toFixed(2)}`}\n                  subtitle={`${stats.trades} trades â€¢ ${((stats.wins / stats.trades) * 100).toFixed(1)}% win rate`}\n                  trend={stats.pnl >= 0 ? 'up' : 'down'}\n                  change={(stats.pnl / stats.volume) * 100}\n                  changeType=\"percentage\"\n                  variant=\"metric\"\n                >\n                  <div className=\"mt-3 pt-3 border-t border-border space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Volume:</span>\n                      <span className=\"font-medium\">${(stats.volume / 1000).toFixed(1)}K</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Avg P&L:</span>\n                      <span className=\"font-medium\">${(stats.pnl / stats.trades).toFixed(2)}</span>\n                    </div>\n                  </div>\n                </ProCard>\n              ))\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Trade Detail Dialog */}\n      {selectedTrade && <TradeDetailDialog trade={selectedTrade} />}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":26454}},"version":1}